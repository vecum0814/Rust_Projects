{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1","program":"/Users/raylee/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","ultraviolet","--edition=2018","/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=142a24290152bb6b","-C","extra-filename=-142a24290152bb6b","--out-dir","/Users/raylee/Rust/dungeoncrawl/target/rls/debug/deps","-L","dependency=/Users/raylee/Rust/dungeoncrawl/target/rls/debug/deps","--extern","wide=/Users/raylee/Rust/dungeoncrawl/target/rls/debug/deps/libwide-656e8714cec95827.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/raylee/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/raylee/Rust/dungeoncrawl/target/rls/debug/deps/libultraviolet-142a24290152bb6b.rmeta"},"prelude":{"crate_id":{"name":"ultraviolet","disambiguator":[12272210793370163552,6387144365873452537]},"crate_root":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src","external_crates":[{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8089372304544504840,2527656813180266519]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8996585198574955197,10064433740309368892]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11464076584146293375,1944750198668660233]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13665112390248177411,18026488694072058539]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4173548784217791313,6413716694370064316]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4417783556059781835,6377966464484580742]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16465050104586441903,11486803546517078730]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4077680908246514517,3259883106732070033]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1548350640775673346,17931765307891215690]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[3115519341803559472,4584691163881866229]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8103449524405359139,17525483118853280774]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16653067590616142994,3376435367795585491]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[12324169339618228571,8193712517758892028]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[11110532902483564599,1367988466669347686]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[9623270257962620076,7602523633458697349]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":16,"id":{"name":"wide","disambiguator":[16369747493788642503,6718614464241124073]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":17,"id":{"name":"safe_arch","disambiguator":[6506041723723955852,8723930185045383250]}},{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","num":18,"id":{"name":"bytemuck","disambiguator":[9086021034364331297,5161938630379813666]}}],"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":0,"byte_end":6454,"line_start":1,"line_end":137,"column_start":1,"column_end":37}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":112005,"byte_end":112006,"line_start":14,"line_end":14,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":64}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/mod.rs","byte_start":216943,"byte_end":216944,"line_start":6,"line_end":6,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec2, Vec2x4, Vec2x8","parent":{"krate":0,"index":141}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/mod.rs","byte_start":216960,"byte_end":216961,"line_start":7,"line_end":7,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec3, Vec3x8, Vec3x4","parent":{"krate":0,"index":141}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/mod.rs","byte_start":216977,"byte_end":216978,"line_start":8,"line_end":8,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Vec4, Vec4x4, Vec4x8","parent":{"krate":0,"index":141}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6030,"byte_end":6031,"line_start":116,"line_end":116,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"Bivec3x8, Bivec2x4, Bivec3, Bivec2, Bivec3x4, Bivec2x8","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6136,"byte_end":6137,"line_start":121,"line_end":121,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6152,"byte_end":6153,"line_start":122,"line_end":122,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Mat2x8, Mat3, Mat4x8, Mat3x8, Mat4, Mat2x4, Mat3x4, Mat2, Mat4x4","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6170,"byte_end":6171,"line_start":123,"line_end":123,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"Rotor2x8, Rotor2x4, Rotor3, Rotor3x8, Rotor2, Rotor3x4","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6192,"byte_end":6193,"line_start":124,"line_end":124,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Isometry3, Isometry3x4, Isometry3x8","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6208,"byte_end":6209,"line_start":125,"line_end":125,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Vec4x8, Vec3x4, Vec2, Vec3, Vec4, Vec2x4, Vec3x8, Vec4x4, Vec2x8","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1174},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6226,"byte_end":6231,"line_start":127,"line_end":127,"column_start":15,"column_end":20},"alias_span":null,"name":"f32x4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1063},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6247,"byte_end":6252,"line_start":128,"line_end":128,"column_start":15,"column_end":20},"alias_span":null,"name":"f32x8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1483},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6268,"byte_end":6273,"line_start":129,"line_end":129,"column_start":15,"column_end":20},"alias_span":null,"name":"f64x2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1284},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6289,"byte_end":6294,"line_start":130,"line_end":130,"column_start":15,"column_end":20},"alias_span":null,"name":"f64x4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1174},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6311,"byte_end":6316,"line_start":132,"line_end":132,"column_start":15,"column_end":20},"alias_span":null,"name":"m32x4","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1063},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6341,"byte_end":6346,"line_start":133,"line_end":133,"column_start":15,"column_end":20},"alias_span":null,"name":"m32x8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1483},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6371,"byte_end":6376,"line_start":134,"line_end":134,"column_start":15,"column_end":20},"alias_span":null,"name":"m64x2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":1284},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":6401,"byte_end":6406,"line_start":135,"line_end":135,"column_start":15,"column_end":20},"alias_span":null,"name":"m64x4","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":0,"byte_end":6454,"line_start":1,"line_end":137,"column_start":1,"column_end":37},"name":"","qualname":"::","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":56},{"krate":0,"index":64},{"krate":0,"index":130},{"krate":0,"index":136},{"krate":0,"index":141},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":269}],"decl_id":null,"docs":" # `ultraviolet`","sig":null,"attributes":[{"value":"/ # `ultraviolet`","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":0,"byte_end":19,"line_start":1,"line_end":1,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":20,"byte_end":23,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is a crate to computer-graphics and games-related linear and geometric algebra, but *fast*, both in terms","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":24,"byte_end":138,"line_start":3,"line_end":3,"column_start":1,"column_end":115}},{"value":"/ of productivity and in terms of runtime performance.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":139,"byte_end":195,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":196,"byte_end":199,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ In terms of productivity, ultraviolet uses no generics and is designed to be as straightforward","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":200,"byte_end":299,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ of an interface as possible, resulting in fast compilation times and clear code. In addition, the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":300,"byte_end":401,"line_start":7,"line_end":7,"column_start":1,"column_end":102}},{"value":"/ lack of generics and Rust type-system \"hacks\" result in clear and concise errors that are easy to","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":402,"byte_end":503,"line_start":8,"line_end":8,"column_start":1,"column_end":102}},{"value":"/ parse and fix for the user.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":504,"byte_end":535,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":536,"byte_end":539,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ In terms of runtime performance, ultraviolet was designed from the start with performance in mind.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":540,"byte_end":642,"line_start":11,"line_end":11,"column_start":1,"column_end":103}},{"value":"/ To do so, we provide two separate kinds of each type, each with nearly identical functionality,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":643,"byte_end":742,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ one with usual scalar f32 values, and the other a 'wide' type which uses SIMD f32x4 vectors for","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":743,"byte_end":842,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ each value. This design is clear and explicit in intent, and it also allows code to","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":843,"byte_end":930,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ take full advantage of SIMD.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":931,"byte_end":963,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":964,"byte_end":967,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The 'wide' types use an \"SoA\" (Structure of Arrays) architecture","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":968,"byte_end":1036,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ such that each wide data structure actually contains the data for 4 or 8 of its associated data type and will do any operation","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1037,"byte_end":1167,"line_start":18,"line_end":18,"column_start":1,"column_end":131}},{"value":"/ on all of the simd 'lanes' at the same time. For example, a `Vec3x8` is equivalent to 8 `Vec3`s all bundled together into one","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1168,"byte_end":1297,"line_start":19,"line_end":19,"column_start":1,"column_end":130}},{"value":"/ data structure.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1298,"byte_end":1317,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1318,"byte_end":1321,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Doing this is potentially *much* (factor of 10) faster than an standard \"AoS\" (Array of Structs) layout,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1322,"byte_end":1430,"line_start":22,"line_end":22,"column_start":1,"column_end":109}},{"value":"/ though it does depend on your workload and algorithm requirements. Algorithms must be carefully architected to take full advantage","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1431,"byte_end":1565,"line_start":23,"line_end":23,"column_start":1,"column_end":135}},{"value":"/ of this, and doing so can be easier said than done, especially if your algorithm involves significant branching.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1566,"byte_end":1682,"line_start":24,"line_end":24,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1683,"byte_end":1686,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ `ultraviolet` was the first Rust math library to be designed in this \"AoSoA\" manner, though","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1687,"byte_end":1782,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ `nalgebra` now supports it for several of their data structures as well.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1783,"byte_end":1859,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1860,"byte_end":1863,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ## Benchmarks","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1864,"byte_end":1881,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1882,"byte_end":1885,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See [`mathbench-rs`](https://github.com/bitshifter/mathbench-rs) for latest benchmarks.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1886,"byte_end":1977,"line_start":31,"line_end":31,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1978,"byte_end":1981,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Cargo Features","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":1982,"byte_end":2003,"line_start":33,"line_end":33,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2004,"byte_end":2007,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ To help further improve build times, `ultraviolet` puts various functionality under feature flags. For example, the 2d and 3d projective geometric algebras","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2008,"byte_end":2167,"line_start":35,"line_end":35,"column_start":1,"column_end":160}},{"value":"/ as well as f64 and integer types are disabled by default. In order to enable them, enable the corresponding crate feature flags in your `Cargo.toml`. For example:","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2168,"byte_end":2334,"line_start":36,"line_end":36,"column_start":1,"column_end":167}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2335,"byte_end":2338,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2339,"byte_end":2350,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2351,"byte_end":2369,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/ ultraviolet = { version = \"0.6\", features = [ \"f64\", \"int\" ] }","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2370,"byte_end":2436,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2437,"byte_end":2444,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2445,"byte_end":2448,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Will enable the `f64` and `int` features. Here's a list of the available features:","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2449,"byte_end":2535,"line_start":43,"line_end":43,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2536,"byte_end":2539,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ * `f64` - Enable f64 bit wide floating point support. Naming convention is `D[Type]`, such as `DVec3x4` would be a collection of 4 3d vectors with f64 precision each.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2540,"byte_end":2710,"line_start":45,"line_end":45,"column_start":1,"column_end":171}},{"value":"/ * `int` - Enable integer vector types.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2711,"byte_end":2753,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/ * `serde` - Enable Serialize and Deserialize implementations for many scalar types.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2754,"byte_end":2841,"line_start":47,"line_end":47,"column_start":1,"column_end":88}},{"value":"/ * `mint` - Enable interoperation with other math libraries through the `mint` interface","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2842,"byte_end":2933,"line_start":48,"line_end":48,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2934,"byte_end":2937,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2938,"byte_end":2959,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2960,"byte_end":2963,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This crate is currently being dogfooded in my ray tracer [`rayn`](https://github.com/termhn/rayn),","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":2964,"byte_end":3066,"line_start":52,"line_end":52,"column_start":1,"column_end":103}},{"value":"/ and is being used by various independent Rust game developers for various projects.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3067,"byte_end":3154,"line_start":53,"line_end":53,"column_start":1,"column_end":88}},{"value":"/ It does what those users have currently needed it to do.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3155,"byte_end":3215,"line_start":54,"line_end":54,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3216,"byte_end":3219,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ There are a couple relatively unique/novel features in this library, the most important being the use of the Geometric Algebra.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3220,"byte_end":3351,"line_start":56,"line_end":56,"column_start":1,"column_end":132}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3352,"byte_end":3355,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Instead of implementing complex number algebra (for 2d rotations) and Quaternion algebra (for 3d rotations), we use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3356,"byte_end":3475,"line_start":58,"line_end":58,"column_start":1,"column_end":120}},{"value":"/ Rotors, a concept taken from Geometric Algebra, to represent 2d and 3d rotations.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3476,"byte_end":3561,"line_start":59,"line_end":59,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3562,"byte_end":3565,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ What this means for the programmer is that you will be using the `Rotor3` type in place of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3566,"byte_end":3660,"line_start":61,"line_end":61,"column_start":1,"column_end":95}},{"value":"/ a Quaternion, though you can expect it to do basically all the same things that a Quaternion does. In fact, Quaternions","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3661,"byte_end":3784,"line_start":62,"line_end":62,"column_start":1,"column_end":124}},{"value":"/ are directly isomorphic to Rotors (meaning they are in essense the same thing, just formulated differently). The reason this decision was made was twofold:","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3785,"byte_end":3944,"line_start":63,"line_end":63,"column_start":1,"column_end":160}},{"value":"/ first, the derivation of the math is actually quite simple to understand. All the derivations for the code implemented in the Rotor structs in this","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":3945,"byte_end":4096,"line_start":64,"line_end":64,"column_start":1,"column_end":152}},{"value":"/ library are written out in the `derivations` folder of the GitHub repo; I derived them manually as part of the implementation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4097,"byte_end":4227,"line_start":65,"line_end":65,"column_start":1,"column_end":131}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4228,"byte_end":4231,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ On the other hand, Quaternions are often basically just seen as black boxes that we programmers use to do rotations because","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4232,"byte_end":4359,"line_start":67,"line_end":67,"column_start":1,"column_end":128}},{"value":"/ they have some nice properties, but that we don't really understand. You can use Rotors this same way, but you can also easily","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4360,"byte_end":4490,"line_start":68,"line_end":68,"column_start":1,"column_end":131}},{"value":"/ understand them. Second is that in some sense they can be seen as 'more correct' than Quaternions. Specifically, they","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4491,"byte_end":4612,"line_start":69,"line_end":69,"column_start":1,"column_end":122}},{"value":"/ facilitate a more proper understanding of rotation as being something that occurs *within a plane* rather than something","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4613,"byte_end":4737,"line_start":70,"line_end":70,"column_start":1,"column_end":125}},{"value":"/ that occurs *around an axis*, as it is generally thought. Finally, Rotors also generalize to 4 and even higher dimensions,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4738,"byte_end":4864,"line_start":71,"line_end":71,"column_start":1,"column_end":127}},{"value":"/ and if someone wants to they could implement a Rotor4 which retains all the properties of a Rotor3/Quaternion but does rotation","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4865,"byte_end":4996,"line_start":72,"line_end":72,"column_start":1,"column_end":132}},{"value":"/ in 4 dimensions instead, something which simply is not possible to do with Quaternions.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":4997,"byte_end":5088,"line_start":73,"line_end":73,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5089,"byte_end":5092,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ If it's missing something you need it to do, bug me on the [GitHub issue tracker](https://github.com/termhn/ultraviolet/issues) and/or Rust community discord server","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5093,"byte_end":5261,"line_start":75,"line_end":75,"column_start":1,"column_end":169}},{"value":"/ (I'm Fusha there) and I'll try to add it for you, if I believe it fits with the vision of the lib :)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5262,"byte_end":5366,"line_start":76,"line_end":76,"column_start":1,"column_end":105}}]},{"kind":"Type","id":{"krate":0,"index":23},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/util.rs","byte_start":8203,"byte_end":8208,"line_start":84,"line_end":84,"column_start":10,"column_end":15},"name":"Error","qualname":"::util::TryFromExt::Error","value":"type Error;","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/util.rs","byte_start":8407,"byte_end":8412,"line_start":91,"line_end":91,"column_start":10,"column_end":15},"name":"Error","qualname":"::util::TryIntoExt::Error","value":"type Error;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":38},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bivec","qualname":"::bivec","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":442},{"krate":0,"index":453},{"krate":0,"index":452},{"krate":0,"index":450},{"krate":0,"index":448},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":280},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":311},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":455},{"krate":0,"index":466},{"krate":0,"index":465},{"krate":0,"index":463},{"krate":0,"index":461},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":334},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":468},{"krate":0,"index":479},{"krate":0,"index":478},{"krate":0,"index":476},{"krate":0,"index":474},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":388},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":652},{"krate":0,"index":665},{"krate":0,"index":664},{"krate":0,"index":662},{"krate":0,"index":660},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":667},{"krate":0,"index":680},{"krate":0,"index":679},{"krate":0,"index":677},{"krate":0,"index":675},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":682},{"krate":0,"index":695},{"krate":0,"index":694},{"krate":0,"index":692},{"krate":0,"index":690},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649}],"decl_id":null,"docs":" Bivectors, i.e. oriented areas.","sig":null,"attributes":[{"value":"/ Bivectors, i.e. oriented areas.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":8693,"byte_end":8728,"line_start":1,"line_end":1,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":8729,"byte_end":8732,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A bivector is an *oriented area*, and is equivalent","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":8733,"byte_end":8788,"line_start":3,"line_end":3,"column_start":1,"column_end":56}},{"value":"/ to the result of the exterior (wedge) product of two vectors, i.e.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":8789,"byte_end":8859,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/ `u ∧ v`. This means it is the *oriented area* of the parallelogram","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":8860,"byte_end":8932,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ created by attaching two vectors and then extending them into a parallelogram.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":8933,"byte_end":9015,"line_start":6,"line_end":6,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9016,"byte_end":9019,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This may be hard to visualize at first, but bivectors are as fundamental as vectors. If vectors","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9020,"byte_end":9119,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/ are a representation of *lines*, then bivectors are a representation of *planes*.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9120,"byte_end":9205,"line_start":9,"line_end":9,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9206,"byte_end":9209,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A normalized bivector can be thought of as representing a plane of rotation and the *direction of rotation*","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9210,"byte_end":9321,"line_start":11,"line_end":11,"column_start":1,"column_end":112}},{"value":"/ inside that plane such that a *positive* rotation follows the orientation of the bivector. When","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9322,"byte_end":9421,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ you obtain a bivector by taking the exterior product of two vectors, the positive direction of rotation","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9422,"byte_end":9529,"line_start":13,"line_end":13,"column_start":1,"column_end":108}},{"value":"/ is defined as the one that *brings the first vector closer to the second*. For example, a bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9530,"byte_end":9632,"line_start":14,"line_end":14,"column_start":1,"column_end":103}},{"value":"/ created by taking the exterior product `x ∧ y` of the x and y basis vectors will create a unit","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9633,"byte_end":9733,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ bivector that represents the xy plane, with orientation such that a positive rotation of `x` inside","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9734,"byte_end":9837,"line_start":16,"line_end":16,"column_start":1,"column_end":104}},{"value":"/ the plane would bring `x` closer to `y`. This is why positive rotation is generally defined as","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9838,"byte_end":9936,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ \"counter clockwise\" in 2d, since such a rotation brings `x` to `y`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":9937,"byte_end":10008,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10009,"byte_end":10012,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Much like vectors can be represented as a linear combination of *basis vectors*, i.e.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10013,"byte_end":10102,"line_start":20,"line_end":20,"column_start":1,"column_end":90}},{"value":"/ a vector \"component representation,\" bivectors can be represented as a linear combination","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10103,"byte_end":10196,"line_start":21,"line_end":21,"column_start":1,"column_end":94}},{"value":"/ of *basis bivectors*. If the basis vectors are the unit vectors in the direction of each","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10197,"byte_end":10289,"line_start":22,"line_end":22,"column_start":1,"column_end":93}},{"value":"/ canonical axis of a space, then the basis bivectors are the *unit area planes* in each of the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10290,"byte_end":10387,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ canonical planes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10388,"byte_end":10409,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10410,"byte_end":10413,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ In 2d, there is only one basis plane, the xy plane, which represents all of 2d space. As such, in 2d","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10414,"byte_end":10518,"line_start":26,"line_end":26,"column_start":1,"column_end":105}},{"value":"/ there is only *one* basis bivector, while there are *two* basis vectors. This means that a 2d bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10519,"byte_end":10625,"line_start":27,"line_end":27,"column_start":1,"column_end":107}},{"value":"/ has only one component.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10626,"byte_end":10653,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10654,"byte_end":10657,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In 3d, there are three basis planes, the xy plane, the xz plane, and the yz plane, which are respectively","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10658,"byte_end":10767,"line_start":30,"line_end":30,"column_start":1,"column_end":110}},{"value":"/ the planes parallel to those combinations of the x, y, and z basis vectors. Therefore, a 3d bivector has","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10768,"byte_end":10876,"line_start":31,"line_end":31,"column_start":1,"column_end":109}},{"value":"/ three components, each of which represents the *projected area* of that bivector onto one of the three","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10877,"byte_end":10983,"line_start":32,"line_end":32,"column_start":1,"column_end":107}},{"value":"/ basis bivectors. This is analogous to how vector components represent the *projected length* of that vector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":10984,"byte_end":11095,"line_start":33,"line_end":33,"column_start":1,"column_end":112}},{"value":"/ onto each unit vector.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11096,"byte_end":11122,"line_start":34,"line_end":34,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":442},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":27302,"byte_end":27308,"line_start":585,"line_end":585,"column_start":6,"column_end":12},"name":"Bivec2","qualname":"::bivec::Bivec2","value":"Bivec2 { xy }","parent":null,"children":[{"krate":0,"index":443}],"decl_id":null,"docs":" A bivector in 2d space.","sig":null,"attributes":[{"value":"/ A bivector in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11259,"byte_end":11286,"line_start":44,"line_end":44,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11295,"byte_end":11298,"line_start":45,"line_end":45,"column_start":9,"column_end":12}},{"value":"/ Since in 2d there is only one plane in the whole of 2d space, a 2d bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11307,"byte_end":11386,"line_start":46,"line_end":46,"column_start":9,"column_end":88}},{"value":"/ has only one component.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11395,"byte_end":11422,"line_start":47,"line_end":47,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11431,"byte_end":11434,"line_start":48,"line_end":48,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11443,"byte_end":11533,"line_start":49,"line_end":49,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11600,"byte_end":11610,"line_start":51,"line_end":51,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":455},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":27323,"byte_end":27331,"line_start":586,"line_end":586,"column_start":6,"column_end":14},"name":"Bivec2x4","qualname":"::bivec::Bivec2x4","value":"Bivec2x4 { xy }","parent":null,"children":[{"krate":0,"index":456}],"decl_id":null,"docs":" A bivector in 2d space.","sig":null,"attributes":[{"value":"/ A bivector in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11259,"byte_end":11286,"line_start":44,"line_end":44,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11295,"byte_end":11298,"line_start":45,"line_end":45,"column_start":9,"column_end":12}},{"value":"/ Since in 2d there is only one plane in the whole of 2d space, a 2d bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11307,"byte_end":11386,"line_start":46,"line_end":46,"column_start":9,"column_end":88}},{"value":"/ has only one component.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11395,"byte_end":11422,"line_start":47,"line_end":47,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11431,"byte_end":11434,"line_start":48,"line_end":48,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11443,"byte_end":11533,"line_start":49,"line_end":49,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11600,"byte_end":11610,"line_start":51,"line_end":51,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":27348,"byte_end":27356,"line_start":587,"line_end":587,"column_start":6,"column_end":14},"name":"Bivec2x8","qualname":"::bivec::Bivec2x8","value":"Bivec2x8 { xy }","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" A bivector in 2d space.","sig":null,"attributes":[{"value":"/ A bivector in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11259,"byte_end":11286,"line_start":44,"line_end":44,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11295,"byte_end":11298,"line_start":45,"line_end":45,"column_start":9,"column_end":12}},{"value":"/ Since in 2d there is only one plane in the whole of 2d space, a 2d bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11307,"byte_end":11386,"line_start":46,"line_end":46,"column_start":9,"column_end":88}},{"value":"/ has only one component.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11395,"byte_end":11422,"line_start":47,"line_end":47,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11431,"byte_end":11434,"line_start":48,"line_end":48,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11443,"byte_end":11533,"line_start":49,"line_end":49,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":11600,"byte_end":11610,"line_start":51,"line_end":51,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":652},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":27496,"byte_end":27502,"line_start":598,"line_end":598,"column_start":5,"column_end":11},"name":"Bivec3","qualname":"::bivec::Bivec3","value":"Bivec3 { xy, xz, yz }","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"decl_id":null,"docs":" A bivector in 3d space.","sig":null,"attributes":[{"value":"/ A bivector in 3d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18393,"byte_end":18420,"line_start":296,"line_end":296,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18429,"byte_end":18432,"line_start":297,"line_end":297,"column_start":9,"column_end":12}},{"value":"/ In 3d, a bivector has 3 components, each one representing the signed *projected area* of the bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18441,"byte_end":18546,"line_start":298,"line_end":298,"column_start":9,"column_end":114}},{"value":"/ onto one of the 3 *basis bivectors*, which can be thought of as corresponding to each of the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18555,"byte_end":18651,"line_start":299,"line_end":299,"column_start":9,"column_end":105}},{"value":"/ three basis planes. This is analogous to the components of a 3d vector, which correspond to the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18660,"byte_end":18759,"line_start":300,"line_end":300,"column_start":9,"column_end":108}},{"value":"/ *projected length* of the vector onto the three basis *vectors. Since in 3d, there are three","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18768,"byte_end":18864,"line_start":301,"line_end":301,"column_start":9,"column_end":105}},{"value":"/ components for both vectors and bivectors, 3d bivectors have been historically confused with","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18873,"byte_end":18969,"line_start":302,"line_end":302,"column_start":9,"column_end":105}},{"value":"/ 3d vectors quite a lot.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18978,"byte_end":19005,"line_start":303,"line_end":303,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19014,"byte_end":19017,"line_start":304,"line_end":304,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19026,"byte_end":19116,"line_start":305,"line_end":305,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19183,"byte_end":19193,"line_start":307,"line_end":307,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":667},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":27523,"byte_end":27531,"line_start":599,"line_end":599,"column_start":5,"column_end":13},"name":"Bivec3x4","qualname":"::bivec::Bivec3x4","value":"Bivec3x4 { xy, xz, yz }","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670}],"decl_id":null,"docs":" A bivector in 3d space.","sig":null,"attributes":[{"value":"/ A bivector in 3d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18393,"byte_end":18420,"line_start":296,"line_end":296,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18429,"byte_end":18432,"line_start":297,"line_end":297,"column_start":9,"column_end":12}},{"value":"/ In 3d, a bivector has 3 components, each one representing the signed *projected area* of the bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18441,"byte_end":18546,"line_start":298,"line_end":298,"column_start":9,"column_end":114}},{"value":"/ onto one of the 3 *basis bivectors*, which can be thought of as corresponding to each of the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18555,"byte_end":18651,"line_start":299,"line_end":299,"column_start":9,"column_end":105}},{"value":"/ three basis planes. This is analogous to the components of a 3d vector, which correspond to the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18660,"byte_end":18759,"line_start":300,"line_end":300,"column_start":9,"column_end":108}},{"value":"/ *projected length* of the vector onto the three basis *vectors. Since in 3d, there are three","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18768,"byte_end":18864,"line_start":301,"line_end":301,"column_start":9,"column_end":105}},{"value":"/ components for both vectors and bivectors, 3d bivectors have been historically confused with","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18873,"byte_end":18969,"line_start":302,"line_end":302,"column_start":9,"column_end":105}},{"value":"/ 3d vectors quite a lot.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18978,"byte_end":19005,"line_start":303,"line_end":303,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19014,"byte_end":19017,"line_start":304,"line_end":304,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19026,"byte_end":19116,"line_start":305,"line_end":305,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19183,"byte_end":19193,"line_start":307,"line_end":307,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":682},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":27556,"byte_end":27564,"line_start":600,"line_end":600,"column_start":5,"column_end":13},"name":"Bivec3x8","qualname":"::bivec::Bivec3x8","value":"Bivec3x8 { xy, xz, yz }","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685}],"decl_id":null,"docs":" A bivector in 3d space.","sig":null,"attributes":[{"value":"/ A bivector in 3d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18393,"byte_end":18420,"line_start":296,"line_end":296,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18429,"byte_end":18432,"line_start":297,"line_end":297,"column_start":9,"column_end":12}},{"value":"/ In 3d, a bivector has 3 components, each one representing the signed *projected area* of the bivector","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18441,"byte_end":18546,"line_start":298,"line_end":298,"column_start":9,"column_end":114}},{"value":"/ onto one of the 3 *basis bivectors*, which can be thought of as corresponding to each of the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18555,"byte_end":18651,"line_start":299,"line_end":299,"column_start":9,"column_end":105}},{"value":"/ three basis planes. This is analogous to the components of a 3d vector, which correspond to the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18660,"byte_end":18759,"line_start":300,"line_end":300,"column_start":9,"column_end":108}},{"value":"/ *projected length* of the vector onto the three basis *vectors. Since in 3d, there are three","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18768,"byte_end":18864,"line_start":301,"line_end":301,"column_start":9,"column_end":105}},{"value":"/ components for both vectors and bivectors, 3d bivectors have been historically confused with","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18873,"byte_end":18969,"line_start":302,"line_end":302,"column_start":9,"column_end":105}},{"value":"/ 3d vectors quite a lot.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":18978,"byte_end":19005,"line_start":303,"line_end":303,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19014,"byte_end":19017,"line_start":304,"line_end":304,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on bivectors generally!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19026,"byte_end":19116,"line_start":305,"line_end":305,"column_start":9,"column_end":99}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/bivec.rs","byte_start":19183,"byte_end":19193,"line_start":307,"line_end":307,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":44},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interp","qualname":"::interp","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":50},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":783},{"krate":0,"index":785}],"decl_id":null,"docs":" Interpolation on types for which it makes sense.\n","sig":null,"attributes":[{"value":"/ Interpolation on types for which it makes sense.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":27724,"byte_end":27776,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28459,"byte_end":28463,"line_start":16,"line_end":16,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::interp::Lerp","value":"Lerp<T>","parent":null,"children":[{"krate":0,"index":48}],"decl_id":null,"docs":" Pure linear interpolation, i.e. `(1.0 - t) * self + (t) * end`.","sig":null,"attributes":[{"value":"/ Pure linear interpolation, i.e. `(1.0 - t) * self + (t) * end`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":27792,"byte_end":27859,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":27860,"byte_end":27863,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ For interpolating `Rotor`s with linear interpolation, you almost certainly","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":27864,"byte_end":27942,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ want to normalize the returned `Rotor`. For example,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":27943,"byte_end":27999,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/ ```rs","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28000,"byte_end":28009,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"/ let interpolated_rotor = rotor1.lerp(rotor2, 0.5).normalized();","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28010,"byte_end":28077,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28078,"byte_end":28085,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ For most cases (especially where performance is the primary concern, like in","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28086,"byte_end":28166,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ animation interpolation for games, this 'normalized lerp' or 'nlerp' is probably","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28167,"byte_end":28251,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ what you want to use. However, there are situations in which you really want","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28252,"byte_end":28332,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ the interpolation between two `Rotor`s to be of constant angular velocity. In this","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28333,"byte_end":28419,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/ case, check out `Slerp`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28420,"byte_end":28448,"line_start":15,"line_end":15,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":28476,"byte_end":28480,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"lerp","qualname":"::interp::Lerp::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":50},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30690,"byte_end":30695,"line_start":65,"line_end":65,"column_start":11,"column_end":16},"name":"Slerp","qualname":"::interp::Slerp","value":"Slerp<T>","parent":null,"children":[{"krate":0,"index":52}],"decl_id":null,"docs":" Spherical-linear interpolation.","sig":null,"attributes":[{"value":"/ Spherical-linear interpolation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30216,"byte_end":30251,"line_start":57,"line_end":57,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30252,"byte_end":30255,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Basically, interpolation that maintains a constant angular velocity","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30256,"byte_end":30327,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ from one orientation on a unit hypersphere to another. This is sorta the \"high quality\" interpolation","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30328,"byte_end":30433,"line_start":60,"line_end":60,"column_start":1,"column_end":106}},{"value":"/ for `Rotor`s, and it can also be used to interpolate other things, one example being interpolation of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30434,"byte_end":30539,"line_start":61,"line_end":61,"column_start":1,"column_end":106}},{"value":"/ 3d normal vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30540,"byte_end":30562,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30563,"byte_end":30566,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Note that you should often normalize the result returned by this operation, when working with `Rotor`s, etc!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30567,"byte_end":30679,"line_start":64,"line_end":64,"column_start":1,"column_end":113}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/interp.rs","byte_start":30708,"byte_end":30713,"line_start":66,"line_end":66,"column_start":8,"column_end":13},"name":"slerp","qualname":"::interp::Slerp::slerp","value":"pub fn slerp(&Self, Self, T) -> Self","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mat","qualname":"::mat","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":994},{"krate":0,"index":1004},{"krate":0,"index":1003},{"krate":0,"index":1001},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":1007},{"krate":0,"index":787},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":837},{"krate":0,"index":843},{"krate":0,"index":847},{"krate":0,"index":851},{"krate":0,"index":854},{"krate":0,"index":1009},{"krate":0,"index":1019},{"krate":0,"index":1018},{"krate":0,"index":1016},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1022},{"krate":0,"index":856},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":906},{"krate":0,"index":912},{"krate":0,"index":916},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":1024},{"krate":0,"index":1034},{"krate":0,"index":1033},{"krate":0,"index":1031},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1037},{"krate":0,"index":925},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":981},{"krate":0,"index":985},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":1288},{"krate":0,"index":1298},{"krate":0,"index":1297},{"krate":0,"index":1295},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1301},{"krate":0,"index":1039},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1099},{"krate":0,"index":1103},{"krate":0,"index":1109},{"krate":0,"index":1113},{"krate":0,"index":1117},{"krate":0,"index":1120},{"krate":0,"index":1303},{"krate":0,"index":1313},{"krate":0,"index":1312},{"krate":0,"index":1310},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1316},{"krate":0,"index":1122},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1171},{"krate":0,"index":1174},{"krate":0,"index":1177},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1186},{"krate":0,"index":1192},{"krate":0,"index":1196},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1318},{"krate":0,"index":1328},{"krate":0,"index":1327},{"krate":0,"index":1325},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1331},{"krate":0,"index":1205},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1269},{"krate":0,"index":1275},{"krate":0,"index":1279},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1606},{"krate":0,"index":1616},{"krate":0,"index":1615},{"krate":0,"index":1613},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1619},{"krate":0,"index":1339},{"krate":0,"index":1388},{"krate":0,"index":1391},{"krate":0,"index":1394},{"krate":0,"index":1397},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1409},{"krate":0,"index":1415},{"krate":0,"index":1419},{"krate":0,"index":1423},{"krate":0,"index":1426},{"krate":0,"index":1621},{"krate":0,"index":1631},{"krate":0,"index":1630},{"krate":0,"index":1628},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1634},{"krate":0,"index":1428},{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1498},{"krate":0,"index":1504},{"krate":0,"index":1508},{"krate":0,"index":1512},{"krate":0,"index":1515},{"krate":0,"index":1636},{"krate":0,"index":1646},{"krate":0,"index":1645},{"krate":0,"index":1643},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1649},{"krate":0,"index":1517},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1578},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1587},{"krate":0,"index":1593},{"krate":0,"index":1597},{"krate":0,"index":1601},{"krate":0,"index":1604}],"decl_id":null,"docs":" Square matrices.\n","sig":null,"attributes":[{"value":"/ Square matrices.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36714,"byte_end":36734,"line_start":1,"line_end":1,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":994},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47340,"byte_end":47344,"line_start":327,"line_end":327,"column_start":5,"column_end":9},"name":"Mat2","qualname":"::mat::Mat2","value":"Mat2 { cols }","parent":null,"children":[{"krate":0,"index":995}],"decl_id":null,"docs":" A 2x2 square matrix.","sig":null,"attributes":[{"value":"/ A 2x2 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36871,"byte_end":36895,"line_start":8,"line_end":8,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36904,"byte_end":36907,"line_start":9,"line_end":9,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 2d vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36916,"byte_end":36999,"line_start":10,"line_end":10,"column_start":9,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":37057,"byte_end":37067,"line_start":12,"line_end":12,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47375,"byte_end":47381,"line_start":328,"line_end":328,"column_start":5,"column_end":11},"name":"Mat2x4","qualname":"::mat::Mat2x4","value":"Mat2x4 { cols }","parent":null,"children":[{"krate":0,"index":1010}],"decl_id":null,"docs":" A 2x2 square matrix.","sig":null,"attributes":[{"value":"/ A 2x2 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36871,"byte_end":36895,"line_start":8,"line_end":8,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36904,"byte_end":36907,"line_start":9,"line_end":9,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 2d vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36916,"byte_end":36999,"line_start":10,"line_end":10,"column_start":9,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":37057,"byte_end":37067,"line_start":12,"line_end":12,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47420,"byte_end":47426,"line_start":329,"line_end":329,"column_start":5,"column_end":11},"name":"Mat2x8","qualname":"::mat::Mat2x8","value":"Mat2x8 { cols }","parent":null,"children":[{"krate":0,"index":1025}],"decl_id":null,"docs":" A 2x2 square matrix.","sig":null,"attributes":[{"value":"/ A 2x2 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36871,"byte_end":36895,"line_start":8,"line_end":8,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36904,"byte_end":36907,"line_start":9,"line_end":9,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 2d vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":36916,"byte_end":36999,"line_start":10,"line_end":10,"column_start":9,"column_end":92}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":37057,"byte_end":37067,"line_start":12,"line_end":12,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":71430,"byte_end":71434,"line_start":937,"line_end":937,"column_start":5,"column_end":9},"name":"Mat3","qualname":"::mat::Mat3","value":"Mat3 { cols }","parent":null,"children":[{"krate":0,"index":1289}],"decl_id":null,"docs":" A 3x3 square matrix.","sig":null,"attributes":[{"value":"/ A 3x3 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47773,"byte_end":47797,"line_start":341,"line_end":341,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47806,"byte_end":47809,"line_start":342,"line_end":342,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 3d vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47818,"byte_end":47901,"line_start":343,"line_end":343,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear +   translation, projection, etc)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47910,"byte_end":47999,"line_start":344,"line_end":344,"column_start":9,"column_end":98}},{"value":"/ on homogeneous 2d vectors","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":48008,"byte_end":48037,"line_start":345,"line_end":345,"column_start":9,"column_end":38}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":48095,"byte_end":48105,"line_start":347,"line_end":347,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":71487,"byte_end":71493,"line_start":938,"line_end":938,"column_start":5,"column_end":11},"name":"Mat3x4","qualname":"::mat::Mat3x4","value":"Mat3x4 { cols }","parent":null,"children":[{"krate":0,"index":1304}],"decl_id":null,"docs":" A 3x3 square matrix.","sig":null,"attributes":[{"value":"/ A 3x3 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47773,"byte_end":47797,"line_start":341,"line_end":341,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47806,"byte_end":47809,"line_start":342,"line_end":342,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 3d vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47818,"byte_end":47901,"line_start":343,"line_end":343,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear +   translation, projection, etc)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47910,"byte_end":47999,"line_start":344,"line_end":344,"column_start":9,"column_end":98}},{"value":"/ on homogeneous 2d vectors","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":48008,"byte_end":48037,"line_start":345,"line_end":345,"column_start":9,"column_end":38}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":48095,"byte_end":48105,"line_start":347,"line_end":347,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1318},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":71560,"byte_end":71566,"line_start":939,"line_end":939,"column_start":5,"column_end":11},"name":"Mat3x8","qualname":"::mat::Mat3x8","value":"Mat3x8 { cols }","parent":null,"children":[{"krate":0,"index":1319}],"decl_id":null,"docs":" A 3x3 square matrix.","sig":null,"attributes":[{"value":"/ A 3x3 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47773,"byte_end":47797,"line_start":341,"line_end":341,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47806,"byte_end":47809,"line_start":342,"line_end":342,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 3d vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47818,"byte_end":47901,"line_start":343,"line_end":343,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear +   translation, projection, etc)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":47910,"byte_end":47999,"line_start":344,"line_end":344,"column_start":9,"column_end":98}},{"value":"/ on homogeneous 2d vectors","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":48008,"byte_end":48037,"line_start":345,"line_end":345,"column_start":9,"column_end":38}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":48095,"byte_end":48105,"line_start":347,"line_end":347,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1606},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":108348,"byte_end":108352,"line_start":1808,"line_end":1808,"column_start":5,"column_end":9},"name":"Mat4","qualname":"::mat::Mat4","value":"Mat4 { cols }","parent":null,"children":[{"krate":0,"index":1607}],"decl_id":null,"docs":" A 4x4 square matrix.","sig":null,"attributes":[{"value":"/ A 4x4 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75406,"byte_end":75430,"line_start":1029,"line_end":1029,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75439,"byte_end":75442,"line_start":1030,"line_end":1030,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 4d vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75451,"byte_end":75534,"line_start":1031,"line_end":1031,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear + translation, projection, etc)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75543,"byte_end":75630,"line_start":1032,"line_end":1032,"column_start":9,"column_end":96}},{"value":"/ on homogeneous 3d vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75639,"byte_end":75669,"line_start":1033,"line_end":1033,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75678,"byte_end":75681,"line_start":1034,"line_end":1034,"column_start":9,"column_end":12}},{"value":"/ Note that most constructors assume that the matrix will be used as a homogeneous 3d","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75690,"byte_end":75777,"line_start":1035,"line_end":1035,"column_start":9,"column_end":96}},{"value":"/ transformation matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75786,"byte_end":75812,"line_start":1036,"line_end":1036,"column_start":9,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75870,"byte_end":75880,"line_start":1038,"line_end":1038,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1621},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":108410,"byte_end":108416,"line_start":1809,"line_end":1809,"column_start":5,"column_end":11},"name":"Mat4x4","qualname":"::mat::Mat4x4","value":"Mat4x4 { cols }","parent":null,"children":[{"krate":0,"index":1622}],"decl_id":null,"docs":" A 4x4 square matrix.","sig":null,"attributes":[{"value":"/ A 4x4 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75406,"byte_end":75430,"line_start":1029,"line_end":1029,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75439,"byte_end":75442,"line_start":1030,"line_end":1030,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 4d vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75451,"byte_end":75534,"line_start":1031,"line_end":1031,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear + translation, projection, etc)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75543,"byte_end":75630,"line_start":1032,"line_end":1032,"column_start":9,"column_end":96}},{"value":"/ on homogeneous 3d vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75639,"byte_end":75669,"line_start":1033,"line_end":1033,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75678,"byte_end":75681,"line_start":1034,"line_end":1034,"column_start":9,"column_end":12}},{"value":"/ Note that most constructors assume that the matrix will be used as a homogeneous 3d","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75690,"byte_end":75777,"line_start":1035,"line_end":1035,"column_start":9,"column_end":96}},{"value":"/ transformation matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75786,"byte_end":75812,"line_start":1036,"line_end":1036,"column_start":9,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75870,"byte_end":75880,"line_start":1038,"line_end":1038,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1636},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":108488,"byte_end":108494,"line_start":1810,"line_end":1810,"column_start":5,"column_end":11},"name":"Mat4x8","qualname":"::mat::Mat4x8","value":"Mat4x8 { cols }","parent":null,"children":[{"krate":0,"index":1637}],"decl_id":null,"docs":" A 4x4 square matrix.","sig":null,"attributes":[{"value":"/ A 4x4 square matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75406,"byte_end":75430,"line_start":1029,"line_end":1029,"column_start":11,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75439,"byte_end":75442,"line_start":1030,"line_end":1030,"column_start":9,"column_end":12}},{"value":"/ Useful for performing linear transformations (rotation, scaling) on 4d vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75451,"byte_end":75534,"line_start":1031,"line_end":1031,"column_start":9,"column_end":92}},{"value":"/ or for performing arbitrary transformations (linear + translation, projection, etc)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75543,"byte_end":75630,"line_start":1032,"line_end":1032,"column_start":9,"column_end":96}},{"value":"/ on homogeneous 3d vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75639,"byte_end":75669,"line_start":1033,"line_end":1033,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75678,"byte_end":75681,"line_start":1034,"line_end":1034,"column_start":9,"column_end":12}},{"value":"/ Note that most constructors assume that the matrix will be used as a homogeneous 3d","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75690,"byte_end":75777,"line_start":1035,"line_end":1035,"column_start":9,"column_end":96}},{"value":"/ transformation matrix.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75786,"byte_end":75812,"line_start":1036,"line_end":1036,"column_start":9,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/mat.rs","byte_start":75870,"byte_end":75880,"line_start":1038,"line_end":1038,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":64},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"projection","qualname":"::projection","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":81},{"krate":0,"index":97},{"krate":0,"index":113},{"krate":0,"index":129}],"decl_id":null,"docs":" Utility functions to create projection matrices.","sig":null,"attributes":[{"value":"/ Utility functions to create projection matrices.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111495,"byte_end":111547,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111548,"byte_end":111551,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Each module contains versions for a certain kind of \"base\" coordinate systems, i.e. the coordinate","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111552,"byte_end":111654,"line_start":3,"line_end":3,"column_start":1,"column_end":103}},{"value":"/ system that your client application is using. All of them assume +x is pointing to the right.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111655,"byte_end":111752,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111753,"byte_end":111756,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The `rh_yup` module is publicly re-exported as it contains the functions for what is generally seen","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111757,"byte_end":111860,"line_start":6,"line_end":6,"column_start":1,"column_end":104}},{"value":"/ as the 'standard' computer graphics coordinate space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111861,"byte_end":111918,"line_start":7,"line_end":7,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lh_ydown","qualname":"::projection::lh_ydown","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is left-handed, with the\n x-axis pointing right, y-axis pointing *down*, and z-axis pointing *out of\n the screen*.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112009,"byte_end":112086,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is left-handed, with the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112087,"byte_end":112166,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ x-axis pointing right, y-axis pointing *down*, and z-axis pointing *out of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112167,"byte_end":112245,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ the screen*.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112246,"byte_end":112262,"line_start":4,"line_end":4,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112596,"byte_end":112611,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::lh_ydown::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112303,"byte_end":112358,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112359,"byte_end":112362,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112363,"byte_end":112457,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112458,"byte_end":112502,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112503,"byte_end":112578,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":112579,"byte_end":112588,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113374,"byte_end":113389,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::lh_ydown::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with Vulkan.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113079,"byte_end":113134,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113135,"byte_end":113138,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113139,"byte_end":113233,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ and the destination space is right-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113234,"byte_end":113279,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113280,"byte_end":113356,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113357,"byte_end":113366,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114137,"byte_end":114157,"line_start":56,"line_end":56,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::lh_ydown::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113831,"byte_end":113897,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113898,"byte_end":113901,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113902,"byte_end":113996,"line_start":52,"line_end":52,"column_start":1,"column_end":95}},{"value":"/ and the destination space is be left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":113997,"byte_end":114044,"line_start":53,"line_end":53,"column_start":1,"column_end":48}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114045,"byte_end":114119,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114120,"byte_end":114129,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":71},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115106,"byte_end":115120,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::lh_ydown::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114627,"byte_end":114690,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114691,"byte_end":114694,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114695,"byte_end":114746,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114747,"byte_end":114808,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114809,"byte_end":114812,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114813,"byte_end":114907,"line_start":82,"line_end":82,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":114908,"byte_end":115001,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115002,"byte_end":115088,"line_start":84,"line_end":84,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115089,"byte_end":115098,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116029,"byte_end":116048,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::lh_ydown::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115540,"byte_end":115614,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115615,"byte_end":115618,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115619,"byte_end":115670,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115671,"byte_end":115732,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115733,"byte_end":115736,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115737,"byte_end":115831,"line_start":105,"line_end":105,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115832,"byte_end":115925,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":115926,"byte_end":116011,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116012,"byte_end":116021,"line_start":108,"line_end":108,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116932,"byte_end":116946,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::lh_ydown::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116451,"byte_end":116514,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116515,"byte_end":116518,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116519,"byte_end":116570,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116571,"byte_end":116632,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116633,"byte_end":116636,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116637,"byte_end":116731,"line_start":128,"line_end":128,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116732,"byte_end":116825,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116826,"byte_end":116914,"line_start":130,"line_end":130,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":116915,"byte_end":116924,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118096,"byte_end":118121,"line_start":159,"line_end":159,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::lh_ydown::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117348,"byte_end":117437,"line_start":146,"line_end":146,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117438,"byte_end":117441,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117442,"byte_end":117539,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117540,"byte_end":117636,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117637,"byte_end":117680,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117681,"byte_end":117684,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117685,"byte_end":117736,"line_start":152,"line_end":152,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117737,"byte_end":117798,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117799,"byte_end":117802,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117803,"byte_end":117897,"line_start":155,"line_end":155,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117898,"byte_end":117991,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":117992,"byte_end":118078,"line_start":157,"line_end":157,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118079,"byte_end":118088,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119218,"byte_end":119243,"line_start":185,"line_end":185,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::lh_ydown::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118468,"byte_end":118557,"line_start":172,"line_end":172,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118558,"byte_end":118561,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118562,"byte_end":118659,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118660,"byte_end":118756,"line_start":175,"line_end":175,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118757,"byte_end":118800,"line_start":176,"line_end":176,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118801,"byte_end":118804,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118805,"byte_end":118856,"line_start":178,"line_end":178,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118857,"byte_end":118918,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118919,"byte_end":118922,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":118923,"byte_end":119017,"line_start":181,"line_end":181,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119018,"byte_end":119111,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119112,"byte_end":119200,"line_start":183,"line_end":183,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119201,"byte_end":119210,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120341,"byte_end":120371,"line_start":211,"line_end":211,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::lh_ydown::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119583,"byte_end":119683,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119684,"byte_end":119687,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119688,"byte_end":119785,"line_start":200,"line_end":200,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119786,"byte_end":119882,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119883,"byte_end":119926,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119927,"byte_end":119930,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119931,"byte_end":119982,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":119983,"byte_end":120044,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120045,"byte_end":120048,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120049,"byte_end":120143,"line_start":207,"line_end":207,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120144,"byte_end":120237,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120238,"byte_end":120323,"line_start":209,"line_end":209,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120324,"byte_end":120333,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121719,"byte_end":121752,"line_start":240,"line_end":240,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::lh_ydown::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120712,"byte_end":120816,"line_start":224,"line_end":224,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120817,"byte_end":120820,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120821,"byte_end":120908,"line_start":226,"line_end":226,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":120909,"byte_end":121013,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121014,"byte_end":121104,"line_start":228,"line_end":228,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121105,"byte_end":121108,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121109,"byte_end":121160,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121161,"byte_end":121222,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121223,"byte_end":121226,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121227,"byte_end":121321,"line_start":233,"line_end":233,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121322,"byte_end":121415,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121416,"byte_end":121501,"line_start":235,"line_end":235,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121502,"byte_end":121505,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121506,"byte_end":121624,"line_start":237,"line_end":237,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121625,"byte_end":121701,"line_start":238,"line_end":238,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":121702,"byte_end":121711,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122972,"byte_end":122997,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::lh_ydown::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122182,"byte_end":122266,"line_start":259,"line_end":259,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122267,"byte_end":122270,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122271,"byte_end":122358,"line_start":261,"line_end":261,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122359,"byte_end":122463,"line_start":262,"line_end":262,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122464,"byte_end":122554,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122555,"byte_end":122558,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122559,"byte_end":122610,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122611,"byte_end":122672,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122673,"byte_end":122676,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122677,"byte_end":122771,"line_start":268,"line_end":268,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122772,"byte_end":122865,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122866,"byte_end":122954,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":122955,"byte_end":122964,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":79},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124757,"byte_end":124799,"line_start":313,"line_end":313,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::lh_ydown::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123419,"byte_end":123535,"line_start":291,"line_end":291,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123536,"byte_end":123539,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123540,"byte_end":123627,"line_start":293,"line_end":293,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123628,"byte_end":123732,"line_start":294,"line_end":294,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123733,"byte_end":123823,"line_start":295,"line_end":295,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123824,"byte_end":123827,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123828,"byte_end":123930,"line_start":297,"line_end":297,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":123931,"byte_end":124027,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124028,"byte_end":124071,"line_start":299,"line_end":299,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124072,"byte_end":124075,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124076,"byte_end":124142,"line_start":301,"line_end":301,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124143,"byte_end":124146,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124147,"byte_end":124198,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124199,"byte_end":124260,"line_start":304,"line_end":304,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124261,"byte_end":124264,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124265,"byte_end":124359,"line_start":306,"line_end":306,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124360,"byte_end":124453,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124454,"byte_end":124539,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124540,"byte_end":124543,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124544,"byte_end":124662,"line_start":310,"line_end":310,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124663,"byte_end":124739,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":124740,"byte_end":124749,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":126275,"byte_end":126309,"line_start":349,"line_end":349,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::lh_ydown::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125153,"byte_end":125250,"line_start":330,"line_end":330,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125251,"byte_end":125254,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125255,"byte_end":125342,"line_start":332,"line_end":332,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125343,"byte_end":125447,"line_start":333,"line_end":333,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125448,"byte_end":125538,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125539,"byte_end":125542,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125543,"byte_end":125645,"line_start":336,"line_end":336,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125646,"byte_end":125742,"line_start":337,"line_end":337,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125743,"byte_end":125786,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125787,"byte_end":125790,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125791,"byte_end":125857,"line_start":340,"line_end":340,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125858,"byte_end":125861,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125862,"byte_end":125913,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125914,"byte_end":125975,"line_start":343,"line_end":343,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125976,"byte_end":125979,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":125980,"byte_end":126074,"line_start":345,"line_end":345,"column_start":1,"column_end":95}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":126075,"byte_end":126168,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":126169,"byte_end":126257,"line_start":347,"line_end":347,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_ydown.rs","byte_start":126258,"byte_end":126267,"line_start":348,"line_end":348,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":81},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lh_yup","qualname":"::projection::lh_yup","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is left-handed, with the\n x-axis pointing right, y-axis pointing *up*, and z-axis pointing *into the\n screen*.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":126662,"byte_end":126739,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is left-handed, with the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":126740,"byte_end":126819,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ x-axis pointing right, y-axis pointing *up*, and z-axis pointing *into the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":126820,"byte_end":126898,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ screen*.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":126899,"byte_end":126911,"line_start":4,"line_end":4,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127243,"byte_end":127258,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::lh_yup::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":126952,"byte_end":127007,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127008,"byte_end":127011,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127012,"byte_end":127104,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127105,"byte_end":127149,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127150,"byte_end":127225,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127226,"byte_end":127235,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128018,"byte_end":128033,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::lh_yup::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with Vulkan.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127725,"byte_end":127780,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127781,"byte_end":127784,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127785,"byte_end":127877,"line_start":32,"line_end":32,"column_start":1,"column_end":93}},{"value":"/ and the destination space is right-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127878,"byte_end":127923,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":127924,"byte_end":128000,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128001,"byte_end":128010,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128777,"byte_end":128797,"line_start":56,"line_end":56,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::lh_yup::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128476,"byte_end":128542,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128543,"byte_end":128546,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128547,"byte_end":128639,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/ and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128640,"byte_end":128684,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128685,"byte_end":128759,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":128760,"byte_end":128769,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":87},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129743,"byte_end":129757,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::lh_yup::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129266,"byte_end":129329,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129330,"byte_end":129333,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129334,"byte_end":129385,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129386,"byte_end":129447,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129448,"byte_end":129451,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129452,"byte_end":129544,"line_start":82,"line_end":82,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129545,"byte_end":129638,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129639,"byte_end":129725,"line_start":84,"line_end":84,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":129726,"byte_end":129735,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130663,"byte_end":130682,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::lh_yup::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130176,"byte_end":130250,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130251,"byte_end":130254,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130255,"byte_end":130306,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130307,"byte_end":130368,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130369,"byte_end":130372,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130373,"byte_end":130465,"line_start":105,"line_end":105,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130466,"byte_end":130559,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130560,"byte_end":130645,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":130646,"byte_end":130655,"line_start":108,"line_end":108,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131563,"byte_end":131577,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::lh_yup::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131084,"byte_end":131147,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131148,"byte_end":131151,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131152,"byte_end":131203,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131204,"byte_end":131265,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131266,"byte_end":131269,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131270,"byte_end":131362,"line_start":128,"line_end":128,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131363,"byte_end":131456,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131457,"byte_end":131545,"line_start":130,"line_end":130,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131546,"byte_end":131555,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132726,"byte_end":132751,"line_start":159,"line_end":159,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::lh_yup::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":131980,"byte_end":132069,"line_start":146,"line_end":146,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132070,"byte_end":132073,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132074,"byte_end":132171,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132172,"byte_end":132268,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132269,"byte_end":132312,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132313,"byte_end":132316,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132317,"byte_end":132368,"line_start":152,"line_end":152,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132369,"byte_end":132430,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132431,"byte_end":132434,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132435,"byte_end":132527,"line_start":155,"line_end":155,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132528,"byte_end":132621,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132622,"byte_end":132708,"line_start":157,"line_end":157,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":132709,"byte_end":132718,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":91},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133845,"byte_end":133870,"line_start":185,"line_end":185,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::lh_yup::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133097,"byte_end":133186,"line_start":172,"line_end":172,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133187,"byte_end":133190,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133191,"byte_end":133288,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133289,"byte_end":133385,"line_start":175,"line_end":175,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133386,"byte_end":133429,"line_start":176,"line_end":176,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133430,"byte_end":133433,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133434,"byte_end":133485,"line_start":178,"line_end":178,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133486,"byte_end":133547,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133548,"byte_end":133551,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133552,"byte_end":133644,"line_start":181,"line_end":181,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133645,"byte_end":133738,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133739,"byte_end":133827,"line_start":183,"line_end":183,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":133828,"byte_end":133837,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134967,"byte_end":134997,"line_start":211,"line_end":211,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::lh_yup::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134211,"byte_end":134311,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134312,"byte_end":134315,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134316,"byte_end":134413,"line_start":200,"line_end":200,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134414,"byte_end":134510,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134511,"byte_end":134554,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134555,"byte_end":134558,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134559,"byte_end":134610,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134611,"byte_end":134672,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134673,"byte_end":134676,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134677,"byte_end":134769,"line_start":207,"line_end":207,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134770,"byte_end":134863,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134864,"byte_end":134949,"line_start":209,"line_end":209,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":134950,"byte_end":134959,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136342,"byte_end":136375,"line_start":240,"line_end":240,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::lh_yup::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135337,"byte_end":135441,"line_start":224,"line_end":224,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135442,"byte_end":135445,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135446,"byte_end":135533,"line_start":226,"line_end":226,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135534,"byte_end":135638,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135639,"byte_end":135729,"line_start":228,"line_end":228,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135730,"byte_end":135733,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135734,"byte_end":135785,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135786,"byte_end":135847,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135848,"byte_end":135851,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135852,"byte_end":135944,"line_start":233,"line_end":233,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":135945,"byte_end":136038,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136039,"byte_end":136124,"line_start":235,"line_end":235,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136125,"byte_end":136128,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136129,"byte_end":136247,"line_start":237,"line_end":237,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136248,"byte_end":136324,"line_start":238,"line_end":238,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136325,"byte_end":136334,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":94},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137592,"byte_end":137617,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::lh_yup::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136804,"byte_end":136888,"line_start":259,"line_end":259,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136889,"byte_end":136892,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136893,"byte_end":136980,"line_start":261,"line_end":261,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":136981,"byte_end":137085,"line_start":262,"line_end":262,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137086,"byte_end":137176,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137177,"byte_end":137180,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137181,"byte_end":137232,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137233,"byte_end":137294,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137295,"byte_end":137298,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137299,"byte_end":137391,"line_start":268,"line_end":268,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137392,"byte_end":137485,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137486,"byte_end":137574,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":137575,"byte_end":137584,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":95},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139377,"byte_end":139419,"line_start":313,"line_end":313,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::lh_yup::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138040,"byte_end":138157,"line_start":291,"line_end":291,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138158,"byte_end":138161,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138162,"byte_end":138249,"line_start":293,"line_end":293,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138250,"byte_end":138354,"line_start":294,"line_end":294,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138355,"byte_end":138445,"line_start":295,"line_end":295,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138446,"byte_end":138449,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138450,"byte_end":138552,"line_start":297,"line_end":297,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138553,"byte_end":138649,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138650,"byte_end":138693,"line_start":299,"line_end":299,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138694,"byte_end":138697,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138698,"byte_end":138764,"line_start":301,"line_end":301,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138765,"byte_end":138768,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138769,"byte_end":138820,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138821,"byte_end":138882,"line_start":304,"line_end":304,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138883,"byte_end":138886,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138887,"byte_end":138979,"line_start":306,"line_end":306,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":138980,"byte_end":139073,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139074,"byte_end":139159,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139160,"byte_end":139163,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139164,"byte_end":139282,"line_start":310,"line_end":310,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139283,"byte_end":139359,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139360,"byte_end":139369,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140892,"byte_end":140926,"line_start":349,"line_end":349,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::lh_yup::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139772,"byte_end":139869,"line_start":330,"line_end":330,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139870,"byte_end":139873,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139874,"byte_end":139961,"line_start":332,"line_end":332,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":139962,"byte_end":140066,"line_start":333,"line_end":333,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140067,"byte_end":140157,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140158,"byte_end":140161,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140162,"byte_end":140264,"line_start":336,"line_end":336,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140265,"byte_end":140361,"line_start":337,"line_end":337,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140362,"byte_end":140405,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140406,"byte_end":140409,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140410,"byte_end":140476,"line_start":340,"line_end":340,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140477,"byte_end":140480,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140481,"byte_end":140532,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140533,"byte_end":140594,"line_start":343,"line_end":343,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140595,"byte_end":140598,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is left-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140599,"byte_end":140691,"line_start":345,"line_end":345,"column_start":1,"column_end":93}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140692,"byte_end":140785,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140786,"byte_end":140874,"line_start":347,"line_end":347,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/lh_yup.rs","byte_start":140875,"byte_end":140884,"line_start":348,"line_end":348,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":97},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rh_ydown","qualname":"::projection::rh_ydown","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is right-handed, with the\n x-axis pointing right, y-axis pointing *down*, and z-axis pointing *into the\n screen*.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141280,"byte_end":141357,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is right-handed, with the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141358,"byte_end":141438,"line_start":2,"line_end":2,"column_start":1,"column_end":81}},{"value":"/ x-axis pointing right, y-axis pointing *down*, and z-axis pointing *into the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141439,"byte_end":141519,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ screen*.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141520,"byte_end":141532,"line_start":4,"line_end":4,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141867,"byte_end":141882,"line_start":15,"line_end":15,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::rh_ydown::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141573,"byte_end":141628,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141629,"byte_end":141632,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141633,"byte_end":141728,"line_start":11,"line_end":11,"column_start":1,"column_end":96}},{"value":"/ and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141729,"byte_end":141773,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141774,"byte_end":141849,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":141850,"byte_end":141859,"line_start":14,"line_end":14,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142646,"byte_end":142661,"line_start":36,"line_end":36,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::rh_ydown::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142351,"byte_end":142406,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142407,"byte_end":142410,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142411,"byte_end":142506,"line_start":32,"line_end":32,"column_start":1,"column_end":96}},{"value":"/ and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142507,"byte_end":142551,"line_start":33,"line_end":33,"column_start":1,"column_end":45}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142552,"byte_end":142628,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":142629,"byte_end":142638,"line_start":35,"line_end":35,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143408,"byte_end":143428,"line_start":56,"line_end":56,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::rh_ydown::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143104,"byte_end":143170,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143171,"byte_end":143174,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143175,"byte_end":143270,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143271,"byte_end":143315,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143316,"byte_end":143390,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143391,"byte_end":143400,"line_start":55,"line_end":55,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144379,"byte_end":144393,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::rh_ydown::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143899,"byte_end":143962,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143963,"byte_end":143966,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":143967,"byte_end":144018,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144019,"byte_end":144080,"line_start":80,"line_end":80,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144081,"byte_end":144084,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144085,"byte_end":144180,"line_start":82,"line_end":82,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144181,"byte_end":144274,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144275,"byte_end":144361,"line_start":84,"line_end":84,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144362,"byte_end":144371,"line_start":85,"line_end":85,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145304,"byte_end":145323,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::rh_ydown::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144814,"byte_end":144888,"line_start":100,"line_end":100,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144889,"byte_end":144892,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144893,"byte_end":144944,"line_start":102,"line_end":102,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":144945,"byte_end":145006,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145007,"byte_end":145010,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145011,"byte_end":145106,"line_start":105,"line_end":105,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145107,"byte_end":145200,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145201,"byte_end":145286,"line_start":107,"line_end":107,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145287,"byte_end":145296,"line_start":108,"line_end":108,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146209,"byte_end":146223,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::rh_ydown::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145727,"byte_end":145790,"line_start":123,"line_end":123,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145791,"byte_end":145794,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145795,"byte_end":145846,"line_start":125,"line_end":125,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145847,"byte_end":145908,"line_start":126,"line_end":126,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145909,"byte_end":145912,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":145913,"byte_end":146008,"line_start":128,"line_end":128,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146009,"byte_end":146102,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146103,"byte_end":146191,"line_start":130,"line_end":130,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146192,"byte_end":146201,"line_start":131,"line_end":131,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147375,"byte_end":147400,"line_start":159,"line_end":159,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::rh_ydown::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146626,"byte_end":146715,"line_start":146,"line_end":146,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146716,"byte_end":146719,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146720,"byte_end":146817,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146818,"byte_end":146914,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146915,"byte_end":146958,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146959,"byte_end":146962,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":146963,"byte_end":147014,"line_start":152,"line_end":152,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147015,"byte_end":147076,"line_start":153,"line_end":153,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147077,"byte_end":147080,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147081,"byte_end":147176,"line_start":155,"line_end":155,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147177,"byte_end":147270,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147271,"byte_end":147357,"line_start":157,"line_end":157,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147358,"byte_end":147367,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148499,"byte_end":148524,"line_start":185,"line_end":185,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::rh_ydown::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147748,"byte_end":147837,"line_start":172,"line_end":172,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147838,"byte_end":147841,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147842,"byte_end":147939,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":147940,"byte_end":148036,"line_start":175,"line_end":175,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148037,"byte_end":148080,"line_start":176,"line_end":176,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148081,"byte_end":148084,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148085,"byte_end":148136,"line_start":178,"line_end":178,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148137,"byte_end":148198,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148199,"byte_end":148202,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148203,"byte_end":148298,"line_start":181,"line_end":181,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148299,"byte_end":148392,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148393,"byte_end":148481,"line_start":183,"line_end":183,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148482,"byte_end":148491,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":108},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149624,"byte_end":149654,"line_start":211,"line_end":211,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::rh_ydown::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148865,"byte_end":148965,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148966,"byte_end":148969,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":148970,"byte_end":149067,"line_start":200,"line_end":200,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149068,"byte_end":149164,"line_start":201,"line_end":201,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149165,"byte_end":149208,"line_start":202,"line_end":202,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149209,"byte_end":149212,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149213,"byte_end":149264,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149265,"byte_end":149326,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149327,"byte_end":149330,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149331,"byte_end":149426,"line_start":207,"line_end":207,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149427,"byte_end":149520,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149521,"byte_end":149606,"line_start":209,"line_end":209,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149607,"byte_end":149616,"line_start":210,"line_end":210,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151004,"byte_end":151037,"line_start":240,"line_end":240,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::rh_ydown::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":149996,"byte_end":150100,"line_start":224,"line_end":224,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150101,"byte_end":150104,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150105,"byte_end":150192,"line_start":226,"line_end":226,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150193,"byte_end":150297,"line_start":227,"line_end":227,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150298,"byte_end":150388,"line_start":228,"line_end":228,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150389,"byte_end":150392,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150393,"byte_end":150444,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150445,"byte_end":150506,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150507,"byte_end":150510,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150511,"byte_end":150606,"line_start":233,"line_end":233,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150607,"byte_end":150700,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150701,"byte_end":150786,"line_start":235,"line_end":235,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150787,"byte_end":150790,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150791,"byte_end":150909,"line_start":237,"line_end":237,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150910,"byte_end":150986,"line_start":238,"line_end":238,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":150987,"byte_end":150996,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":110},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152259,"byte_end":152284,"line_start":272,"line_end":272,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::rh_ydown::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151468,"byte_end":151552,"line_start":259,"line_end":259,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151553,"byte_end":151556,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151557,"byte_end":151644,"line_start":261,"line_end":261,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151645,"byte_end":151749,"line_start":262,"line_end":262,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151750,"byte_end":151840,"line_start":263,"line_end":263,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151841,"byte_end":151844,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151845,"byte_end":151896,"line_start":265,"line_end":265,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151897,"byte_end":151958,"line_start":266,"line_end":266,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151959,"byte_end":151962,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":151963,"byte_end":152058,"line_start":268,"line_end":268,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152059,"byte_end":152152,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152153,"byte_end":152241,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152242,"byte_end":152251,"line_start":271,"line_end":271,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154047,"byte_end":154089,"line_start":313,"line_end":313,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::rh_ydown::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152707,"byte_end":152824,"line_start":291,"line_end":291,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152825,"byte_end":152828,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152829,"byte_end":152916,"line_start":293,"line_end":293,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":152917,"byte_end":153021,"line_start":294,"line_end":294,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153022,"byte_end":153112,"line_start":295,"line_end":295,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153113,"byte_end":153116,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153117,"byte_end":153219,"line_start":297,"line_end":297,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153220,"byte_end":153316,"line_start":298,"line_end":298,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153317,"byte_end":153360,"line_start":299,"line_end":299,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153361,"byte_end":153364,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153365,"byte_end":153431,"line_start":301,"line_end":301,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153432,"byte_end":153435,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153436,"byte_end":153487,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153488,"byte_end":153549,"line_start":304,"line_end":304,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153550,"byte_end":153553,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153554,"byte_end":153649,"line_start":306,"line_end":306,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153650,"byte_end":153743,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153744,"byte_end":153829,"line_start":308,"line_end":308,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153830,"byte_end":153833,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153834,"byte_end":153952,"line_start":310,"line_end":310,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":153953,"byte_end":154029,"line_start":311,"line_end":311,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154030,"byte_end":154039,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155567,"byte_end":155601,"line_start":349,"line_end":349,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::rh_ydown::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154444,"byte_end":154541,"line_start":330,"line_end":330,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154542,"byte_end":154545,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154546,"byte_end":154633,"line_start":332,"line_end":332,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154634,"byte_end":154738,"line_start":333,"line_end":333,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154739,"byte_end":154829,"line_start":334,"line_end":334,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154830,"byte_end":154833,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154834,"byte_end":154936,"line_start":336,"line_end":336,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":154937,"byte_end":155033,"line_start":337,"line_end":337,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155034,"byte_end":155077,"line_start":338,"line_end":338,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155078,"byte_end":155081,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155082,"byte_end":155148,"line_start":340,"line_end":340,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155149,"byte_end":155152,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155153,"byte_end":155204,"line_start":342,"line_end":342,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155205,"byte_end":155266,"line_start":343,"line_end":343,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155267,"byte_end":155270,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-down","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155271,"byte_end":155366,"line_start":345,"line_end":345,"column_start":1,"column_end":96}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155367,"byte_end":155460,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155461,"byte_end":155549,"line_start":347,"line_end":347,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_ydown.rs","byte_start":155550,"byte_end":155559,"line_start":348,"line_end":348,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rh_yup","qualname":"::projection::rh_yup","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" Projection matrices that are intended to be used when the base coordinate\n system (i.e. the one used by the application code) is right-handed with the\n the x-axis pointing right, y-axis pointing *up*, and z-axis pointing *out of\n the screen*. This is reexported at the root of `projections` as it is the\n de-facto standard coordinate system for doing computer graphics programming.\n","sig":null,"attributes":[{"value":"/ Projection matrices that are intended to be used when the base coordinate","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":155955,"byte_end":156032,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ system (i.e. the one used by the application code) is right-handed with the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156033,"byte_end":156112,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ the x-axis pointing right, y-axis pointing *up*, and z-axis pointing *out of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156113,"byte_end":156193,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ the screen*. This is reexported at the root of `projections` as it is the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156194,"byte_end":156271,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ de-facto standard coordinate system for doing computer graphics programming.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156272,"byte_end":156352,"line_start":5,"line_end":5,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156734,"byte_end":156749,"line_start":16,"line_end":16,"column_start":8,"column_end":23},"name":"orthographic_gl","qualname":"::projection::rh_yup::orthographic_gl","value":"pub fn orthographic_gl(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with OpenGL.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156393,"byte_end":156448,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156449,"byte_end":156452,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156453,"byte_end":156546,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space)and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156547,"byte_end":156640,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ and y-up, with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156641,"byte_end":156716,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":156717,"byte_end":156726,"line_start":15,"line_end":15,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157560,"byte_end":157575,"line_start":37,"line_end":37,"column_start":8,"column_end":23},"name":"orthographic_vk","qualname":"::projection::rh_yup::orthographic_vk","value":"pub fn orthographic_vk(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with Vulkan.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157217,"byte_end":157272,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157273,"byte_end":157276,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157277,"byte_end":157370,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space)and the destination space is right-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157371,"byte_end":157465,"line_start":34,"line_end":34,"column_start":1,"column_end":95}},{"value":"/ and y-down, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157466,"byte_end":157542,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":157543,"byte_end":157552,"line_start":36,"line_end":36,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158370,"byte_end":158390,"line_start":57,"line_end":57,"column_start":8,"column_end":28},"name":"orthographic_wgpu_dx","qualname":"::projection::rh_yup::orthographic_wgpu_dx","value":"pub fn orthographic_wgpu_dx(f32, f32, f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Orthographic projection matrix for use with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Orthographic projection matrix for use with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158019,"byte_end":158085,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158086,"byte_end":158089,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158090,"byte_end":158183,"line_start":53,"line_end":53,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space)and the destination space is left-handed","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158184,"byte_end":158277,"line_start":54,"line_end":54,"column_start":1,"column_end":94}},{"value":"/ and y-up, with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158278,"byte_end":158352,"line_start":55,"line_end":55,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158353,"byte_end":158362,"line_start":56,"line_end":56,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159338,"byte_end":159352,"line_start":87,"line_end":87,"column_start":8,"column_end":22},"name":"perspective_gl","qualname":"::projection::rh_yup::perspective_gl","value":"pub fn perspective_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158860,"byte_end":158923,"line_start":78,"line_end":78,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158924,"byte_end":158927,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158928,"byte_end":158979,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":158980,"byte_end":159041,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159042,"byte_end":159045,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159046,"byte_end":159139,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159140,"byte_end":159233,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159234,"byte_end":159320,"line_start":85,"line_end":85,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159321,"byte_end":159330,"line_start":86,"line_end":86,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160260,"byte_end":160279,"line_start":110,"line_end":110,"column_start":8,"column_end":27},"name":"perspective_wgpu_dx","qualname":"::projection::rh_yup::perspective_wgpu_dx","value":"pub fn perspective_wgpu_dx(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159772,"byte_end":159846,"line_start":101,"line_end":101,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159847,"byte_end":159850,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159851,"byte_end":159902,"line_start":103,"line_end":103,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159903,"byte_end":159964,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159965,"byte_end":159968,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":159969,"byte_end":160062,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160063,"byte_end":160156,"line_start":107,"line_end":107,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160157,"byte_end":160242,"line_start":108,"line_end":108,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160243,"byte_end":160252,"line_start":109,"line_end":109,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":121},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161162,"byte_end":161176,"line_start":133,"line_end":133,"column_start":8,"column_end":22},"name":"perspective_vk","qualname":"::projection::rh_yup::perspective_vk","value":"pub fn perspective_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160682,"byte_end":160745,"line_start":124,"line_end":124,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160746,"byte_end":160749,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160750,"byte_end":160801,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160802,"byte_end":160863,"line_start":127,"line_end":127,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160864,"byte_end":160867,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160868,"byte_end":160961,"line_start":129,"line_end":129,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":160962,"byte_end":161055,"line_start":130,"line_end":130,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161056,"byte_end":161144,"line_start":131,"line_end":131,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161145,"byte_end":161154,"line_start":132,"line_end":132,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":122},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162327,"byte_end":162352,"line_start":160,"line_end":160,"column_start":8,"column_end":33},"name":"perspective_infinite_z_gl","qualname":"::projection::rh_yup::perspective_infinite_z_gl","value":"pub fn perspective_infinite_z_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161580,"byte_end":161669,"line_start":147,"line_end":147,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161670,"byte_end":161673,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161674,"byte_end":161771,"line_start":149,"line_end":149,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161772,"byte_end":161868,"line_start":150,"line_end":150,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161869,"byte_end":161912,"line_start":151,"line_end":151,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161913,"byte_end":161916,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161917,"byte_end":161968,"line_start":153,"line_end":153,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":161969,"byte_end":162030,"line_start":154,"line_end":154,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162031,"byte_end":162034,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162035,"byte_end":162128,"line_start":156,"line_end":156,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162129,"byte_end":162222,"line_start":157,"line_end":157,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from -1.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162223,"byte_end":162309,"line_start":158,"line_end":158,"column_start":1,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162310,"byte_end":162319,"line_start":159,"line_end":159,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163448,"byte_end":163473,"line_start":186,"line_end":186,"column_start":8,"column_end":33},"name":"perspective_infinite_z_vk","qualname":"::projection::rh_yup::perspective_infinite_z_vk","value":"pub fn perspective_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162699,"byte_end":162788,"line_start":173,"line_end":173,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162789,"byte_end":162792,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162793,"byte_end":162890,"line_start":175,"line_end":175,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162891,"byte_end":162987,"line_start":176,"line_end":176,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":162988,"byte_end":163031,"line_start":177,"line_end":177,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163032,"byte_end":163035,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163036,"byte_end":163087,"line_start":179,"line_end":179,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163088,"byte_end":163149,"line_start":180,"line_end":180,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163150,"byte_end":163153,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163154,"byte_end":163247,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163248,"byte_end":163341,"line_start":183,"line_end":183,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163342,"byte_end":163430,"line_start":184,"line_end":184,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163431,"byte_end":163440,"line_start":185,"line_end":185,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":124},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164572,"byte_end":164602,"line_start":212,"line_end":212,"column_start":8,"column_end":38},"name":"perspective_infinite_z_wgpu_dx","qualname":"::projection::rh_yup::perspective_infinite_z_wgpu_dx","value":"pub fn perspective_infinite_z_wgpu_dx(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with infinite z-far plane meant to be used with WebGPU or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163815,"byte_end":163915,"line_start":199,"line_end":199,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163916,"byte_end":163919,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":163920,"byte_end":164017,"line_start":201,"line_end":201,"column_start":1,"column_end":98}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164018,"byte_end":164114,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164115,"byte_end":164158,"line_start":203,"line_end":203,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164159,"byte_end":164162,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164163,"byte_end":164214,"line_start":205,"line_end":205,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164215,"byte_end":164276,"line_start":206,"line_end":206,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164277,"byte_end":164280,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164281,"byte_end":164374,"line_start":208,"line_end":208,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164375,"byte_end":164468,"line_start":209,"line_end":209,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164469,"byte_end":164554,"line_start":210,"line_end":210,"column_start":1,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164555,"byte_end":164564,"line_start":211,"line_end":211,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":125},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165949,"byte_end":165982,"line_start":241,"line_end":241,"column_start":8,"column_end":41},"name":"perspective_reversed_z_wgpu_dx_gl","qualname":"::projection::rh_yup::perspective_reversed_z_wgpu_dx_gl","value":"pub fn perspective_reversed_z_wgpu_dx_gl(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with WebGPU, DirectX, or OpenGL.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":164943,"byte_end":165047,"line_start":225,"line_end":225,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165048,"byte_end":165051,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165052,"byte_end":165139,"line_start":227,"line_end":227,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165140,"byte_end":165244,"line_start":228,"line_end":228,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165245,"byte_end":165335,"line_start":229,"line_end":229,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165336,"byte_end":165339,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165340,"byte_end":165391,"line_start":231,"line_end":231,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165392,"byte_end":165453,"line_start":232,"line_end":232,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165454,"byte_end":165457,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165458,"byte_end":165551,"line_start":234,"line_end":234,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165552,"byte_end":165645,"line_start":235,"line_end":235,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165646,"byte_end":165731,"line_start":236,"line_end":236,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165732,"byte_end":165735,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165736,"byte_end":165854,"line_start":238,"line_end":238,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165855,"byte_end":165931,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":165932,"byte_end":165941,"line_start":240,"line_end":240,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167201,"byte_end":167226,"line_start":273,"line_end":273,"column_start":8,"column_end":33},"name":"perspective_reversed_z_vk","qualname":"::projection::rh_yup::perspective_reversed_z_vk","value":"pub fn perspective_reversed_z_vk(f32, f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166412,"byte_end":166496,"line_start":260,"line_end":260,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166497,"byte_end":166500,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166501,"byte_end":166588,"line_start":262,"line_end":262,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166589,"byte_end":166693,"line_start":263,"line_end":263,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166694,"byte_end":166784,"line_start":264,"line_end":264,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166785,"byte_end":166788,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166789,"byte_end":166840,"line_start":266,"line_end":266,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166841,"byte_end":166902,"line_start":267,"line_end":267,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166903,"byte_end":166906,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":166907,"byte_end":167000,"line_start":269,"line_end":269,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167001,"byte_end":167094,"line_start":270,"line_end":270,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167095,"byte_end":167183,"line_start":271,"line_end":271,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167184,"byte_end":167193,"line_start":272,"line_end":272,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":127},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168988,"byte_end":169030,"line_start":314,"line_end":314,"column_start":8,"column_end":50},"name":"perspective_reversed_infinite_z_wgpu_dx_gl","qualname":"::projection::rh_yup::perspective_reversed_infinite_z_wgpu_dx_gl","value":"pub fn perspective_reversed_infinite_z_wgpu_dx_gl(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with WebGPU, OpenGL, or DirectX.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167650,"byte_end":167767,"line_start":292,"line_end":292,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167768,"byte_end":167771,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167772,"byte_end":167859,"line_start":294,"line_end":294,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167860,"byte_end":167964,"line_start":295,"line_end":295,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":167965,"byte_end":168055,"line_start":296,"line_end":296,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168056,"byte_end":168059,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168060,"byte_end":168162,"line_start":298,"line_end":298,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168163,"byte_end":168259,"line_start":299,"line_end":299,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168260,"byte_end":168303,"line_start":300,"line_end":300,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168304,"byte_end":168307,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168308,"byte_end":168374,"line_start":302,"line_end":302,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168375,"byte_end":168378,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168379,"byte_end":168430,"line_start":304,"line_end":304,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168431,"byte_end":168492,"line_start":305,"line_end":305,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168493,"byte_end":168496,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168497,"byte_end":168590,"line_start":307,"line_end":307,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168591,"byte_end":168684,"line_start":308,"line_end":308,"column_start":1,"column_end":94}},{"value":"/ left-handed and y-up with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168685,"byte_end":168770,"line_start":309,"line_end":309,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168771,"byte_end":168774,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ **Note that in order for this to work properly with OpenGL, you'll need to use the `gl_arb_clip_control` extension","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168775,"byte_end":168893,"line_start":311,"line_end":311,"column_start":1,"column_end":119}},{"value":"/ and set the z clip from 0.0 to 1.0 rather than the default -1.0 to 1.0**","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168894,"byte_end":168970,"line_start":312,"line_end":312,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":168971,"byte_end":168980,"line_start":313,"line_end":313,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170505,"byte_end":170539,"line_start":350,"line_end":350,"column_start":8,"column_end":42},"name":"perspective_reversed_infinite_z_vk","qualname":"::projection::rh_yup::perspective_reversed_infinite_z_vk","value":"pub fn perspective_reversed_infinite_z_vk(f32, f32, f32) -> Mat4","parent":null,"children":[],"decl_id":null,"docs":" Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","sig":null,"attributes":[{"value":"/ Perspective projection matrix with reversed and infinite z-axis meant to be used with Vulkan.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169384,"byte_end":169481,"line_start":331,"line_end":331,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169482,"byte_end":169485,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ Reversed-Z provides significantly better precision and therefore reduced z-fighting","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169486,"byte_end":169573,"line_start":333,"line_end":333,"column_start":1,"column_end":88}},{"value":"/ for most depth situations, especially when a floating-point depth buffer is used. You'll want to use","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169574,"byte_end":169678,"line_start":334,"line_end":334,"column_start":1,"column_end":105}},{"value":"/ a reversed depth comparison function and depth clear value when using this projection.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169679,"byte_end":169769,"line_start":335,"line_end":335,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169770,"byte_end":169773,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ Infinte-Z is useful for extremely large scenes where having a far clip plane is extraneous anyway,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169774,"byte_end":169876,"line_start":337,"line_end":337,"column_start":1,"column_end":103}},{"value":"/ as allowing it to approach infinity it eliminates several approximate numerical computations","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169877,"byte_end":169973,"line_start":338,"line_end":338,"column_start":1,"column_end":97}},{"value":"/ and so can improve z-fighting behavior.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":169974,"byte_end":170017,"line_start":339,"line_end":339,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170018,"byte_end":170021,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ Combining them gives the best of both worlds for large scenes.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170022,"byte_end":170088,"line_start":341,"line_end":341,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170089,"byte_end":170092,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ * `vertical_fov` should be provided in radians.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170093,"byte_end":170144,"line_start":343,"line_end":343,"column_start":1,"column_end":52}},{"value":"/ * `aspect_ratio` should be the quotient `width / height`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170145,"byte_end":170206,"line_start":344,"line_end":344,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170207,"byte_end":170210,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ This matrix is meant to be used when the source coordinate space is right-handed and y-up","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170211,"byte_end":170304,"line_start":346,"line_end":346,"column_start":1,"column_end":94}},{"value":"/ (the standard computer graphics coordinate space) and the destination coordinate space is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170305,"byte_end":170398,"line_start":347,"line_end":347,"column_start":1,"column_end":94}},{"value":"/ right-handed and y-down with Z (depth) clip extending from 0.0 (close) to 1.0 (far).","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170399,"byte_end":170487,"line_start":348,"line_end":348,"column_start":1,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection/rh_yup.rs","byte_start":170488,"byte_end":170497,"line_start":349,"line_end":349,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":130},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rotor","qualname":"::rotor","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":1804},{"krate":0,"index":1814},{"krate":0,"index":1813},{"krate":0,"index":1811},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1816},{"krate":0,"index":1651},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1686},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1818},{"krate":0,"index":1828},{"krate":0,"index":1827},{"krate":0,"index":1825},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1830},{"krate":0,"index":1702},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1737},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1832},{"krate":0,"index":1842},{"krate":0,"index":1841},{"krate":0,"index":1839},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1844},{"krate":0,"index":1753},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1796},{"krate":0,"index":1799},{"krate":0,"index":1801},{"krate":0,"index":2026},{"krate":0,"index":2036},{"krate":0,"index":2035},{"krate":0,"index":2033},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2038},{"krate":0,"index":1846},{"krate":0,"index":1873},{"krate":0,"index":1875},{"krate":0,"index":1877},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1898},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":2040},{"krate":0,"index":2050},{"krate":0,"index":2049},{"krate":0,"index":2047},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2052},{"krate":0,"index":1906},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1953},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":2054},{"krate":0,"index":2064},{"krate":0,"index":2063},{"krate":0,"index":2061},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2066},{"krate":0,"index":1966},{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":2005},{"krate":0,"index":2007},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2015},{"krate":0,"index":2018},{"krate":0,"index":2021},{"krate":0,"index":2023}],"decl_id":null,"docs":" Rotors, i.e. constructs that describe and perform rotations.","sig":null,"attributes":[{"value":"/ Rotors, i.e. constructs that describe and perform rotations.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":170894,"byte_end":170958,"line_start":1,"line_end":1,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":170959,"byte_end":170962,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A rotor is the geometric algebra analog of the Quaternion, and they","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":170963,"byte_end":171034,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ end up being mathematically equivalent. They are good for doing the same","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171035,"byte_end":171111,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/ sorts of things, and for the most part you can use rotors just like you","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171112,"byte_end":171187,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ would a quaternion, if you're already familiar with using those. However,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171188,"byte_end":171265,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ they are significantly easier to derive yourself and build intuition for,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171266,"byte_end":171343,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ and they generalize to both lower and higher dimensions than just 3, which","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171344,"byte_end":171422,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ is the only space for which quaternions are valuable.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171423,"byte_end":171480,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171481,"byte_end":171484,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A rotor can be thought of in multiple ways, the first of which","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171485,"byte_end":171551,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ is that a rotor is the result of the 'geometric product' of two vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171552,"byte_end":171628,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ denoted for two vectors `u` and `v` as simply `uv`. This operation is","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171629,"byte_end":171702,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ defined as","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171703,"byte_end":171717,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171718,"byte_end":171721,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `uv = u · v + u ∧ v`","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171722,"byte_end":171749,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171750,"byte_end":171753,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ As can be seen, this operation results in the addition of two different","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171754,"byte_end":171829,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ types of values: first, the dot product will result in a scalar, and second,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171830,"byte_end":171910,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the exterior (wedge) product will result in a bivector. The addition of these two different","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":171911,"byte_end":172006,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ types is not defined, but can be understood in a similar way as complex numbers,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172007,"byte_end":172091,"line_start":21,"line_end":21,"column_start":1,"column_end":85}},{"value":"/ i.e. as a 'bundle' of two different kinds of values.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172092,"byte_end":172148,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172149,"byte_end":172152,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The reason we call this type of value a 'rotor' is that if you both left- and","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172153,"byte_end":172234,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/ right-multiply (using the geometric product) a rotor with a vector, you will","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172235,"byte_end":172315,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ rotate the sandwiched vector. For example, if you start with two vectors,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172316,"byte_end":172393,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ `a` and `b`, and create a rotor `ab` from them, then rotate a vector `u` with this","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172394,"byte_end":172480,"line_start":27,"line_end":27,"column_start":1,"column_end":87}},{"value":"/ rotor by doing `ba u ab`, you will end up rotating the vector `u` by in the plane","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172481,"byte_end":172566,"line_start":28,"line_end":28,"column_start":1,"column_end":86}},{"value":"/ that corresponds to `a ∧ b` (i.e. the plane which is parallel with both vectors), by","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172567,"byte_end":172657,"line_start":29,"line_end":29,"column_start":1,"column_end":89}},{"value":"/ twice the angle between `a` and `b`, in the opposite direction of the one that would","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172658,"byte_end":172746,"line_start":30,"line_end":30,"column_start":1,"column_end":89}},{"value":"/ bring `a` towards `b` within that plane.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172747,"byte_end":172791,"line_start":31,"line_end":31,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172792,"byte_end":172795,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ In `ultraviolet`, the `Mul` trait is implemented for Rotors such that doing","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172796,"byte_end":172875,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172876,"byte_end":172879,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ `rotor * vec`","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172880,"byte_end":172897,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172898,"byte_end":172901,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ will rotate the Vector `vec` by the Rotor `rotor`.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172902,"byte_end":172956,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172957,"byte_end":172960,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ To compose rotations, simply left-multiply the rotor by another one in the same","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":172961,"byte_end":173044,"line_start":39,"line_end":39,"column_start":1,"column_end":84}},{"value":"/ way that matrix composition works. For example,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173045,"byte_end":173096,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173097,"byte_end":173100,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `rotor_ab = rotor_b * rotor_a`","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173101,"byte_end":173135,"line_start":42,"line_end":42,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173136,"byte_end":173139,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Will result in the composition of `rotor_b` and `rotor_a` such that `rotor_ab` encodes","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173140,"byte_end":173230,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ a rotation as though `rotor_a` was applied *and then* `rotor_b` was applied.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173231,"byte_end":173311,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173312,"byte_end":173315,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Note that *composition* of rotors is *more efficient*","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173316,"byte_end":173373,"line_start":47,"line_end":47,"column_start":1,"column_end":58}},{"value":"/ than composition of matrices, however, the operation of rotating a vector by a rotor, i.e. the","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173374,"byte_end":173472,"line_start":48,"line_end":48,"column_start":1,"column_end":99}},{"value":"/ `rotor * vec` product,  is *more expensive* to","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173473,"byte_end":173523,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ compute than the `matrix * vec` product. So, rotors are excellent for *building* and *interpolating*","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173524,"byte_end":173628,"line_start":50,"line_end":50,"column_start":1,"column_end":105}},{"value":"/ rotations, but it may be preferable to convert them into matrices before applying them to","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173629,"byte_end":173722,"line_start":51,"line_end":51,"column_start":1,"column_end":94}},{"value":"/ vectors/points, if the same rotation will be applied to many vectors.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173723,"byte_end":173796,"line_start":52,"line_end":52,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182508,"byte_end":182514,"line_start":340,"line_end":340,"column_start":5,"column_end":11},"name":"Rotor2","qualname":"::rotor::Rotor2","value":"Rotor2 { s, bv }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806}],"decl_id":null,"docs":" A Rotor in 2d space.","sig":null,"attributes":[{"value":"/ A Rotor in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173966,"byte_end":173990,"line_start":62,"line_end":62,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173999,"byte_end":174002,"line_start":63,"line_end":63,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":174011,"byte_end":174088,"line_start":64,"line_end":64,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":174146,"byte_end":174156,"line_start":66,"line_end":66,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1818},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182549,"byte_end":182557,"line_start":341,"line_end":341,"column_start":5,"column_end":13},"name":"Rotor2x4","qualname":"::rotor::Rotor2x4","value":"Rotor2x4 { s, bv }","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820}],"decl_id":null,"docs":" A Rotor in 2d space.","sig":null,"attributes":[{"value":"/ A Rotor in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173966,"byte_end":173990,"line_start":62,"line_end":62,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173999,"byte_end":174002,"line_start":63,"line_end":63,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":174011,"byte_end":174088,"line_start":64,"line_end":64,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":174146,"byte_end":174156,"line_start":66,"line_end":66,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1832},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182600,"byte_end":182608,"line_start":342,"line_end":342,"column_start":5,"column_end":13},"name":"Rotor2x8","qualname":"::rotor::Rotor2x8","value":"Rotor2x8 { s, bv }","parent":null,"children":[{"krate":0,"index":1833},{"krate":0,"index":1834}],"decl_id":null,"docs":" A Rotor in 2d space.","sig":null,"attributes":[{"value":"/ A Rotor in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173966,"byte_end":173990,"line_start":62,"line_end":62,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":173999,"byte_end":174002,"line_start":63,"line_end":63,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":174011,"byte_end":174088,"line_start":64,"line_end":64,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":174146,"byte_end":174156,"line_start":66,"line_end":66,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2026},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":198318,"byte_end":198324,"line_start":786,"line_end":786,"column_start":5,"column_end":11},"name":"Rotor3","qualname":"::rotor::Rotor3","value":"Rotor3 { s, bv }","parent":null,"children":[{"krate":0,"index":2027},{"krate":0,"index":2028}],"decl_id":null,"docs":" A Rotor in 3d space.","sig":null,"attributes":[{"value":"/ A Rotor in 3d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182957,"byte_end":182981,"line_start":355,"line_end":355,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182990,"byte_end":182993,"line_start":356,"line_end":356,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":183002,"byte_end":183079,"line_start":357,"line_end":357,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":183137,"byte_end":183147,"line_start":359,"line_end":359,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2040},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":198359,"byte_end":198367,"line_start":787,"line_end":787,"column_start":5,"column_end":13},"name":"Rotor3x4","qualname":"::rotor::Rotor3x4","value":"Rotor3x4 { s, bv }","parent":null,"children":[{"krate":0,"index":2041},{"krate":0,"index":2042}],"decl_id":null,"docs":" A Rotor in 3d space.","sig":null,"attributes":[{"value":"/ A Rotor in 3d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182957,"byte_end":182981,"line_start":355,"line_end":355,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182990,"byte_end":182993,"line_start":356,"line_end":356,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":183002,"byte_end":183079,"line_start":357,"line_end":357,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":183137,"byte_end":183147,"line_start":359,"line_end":359,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":198410,"byte_end":198418,"line_start":788,"line_end":788,"column_start":5,"column_end":13},"name":"Rotor3x8","qualname":"::rotor::Rotor3x8","value":"Rotor3x8 { s, bv }","parent":null,"children":[{"krate":0,"index":2055},{"krate":0,"index":2056}],"decl_id":null,"docs":" A Rotor in 3d space.","sig":null,"attributes":[{"value":"/ A Rotor in 3d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182957,"byte_end":182981,"line_start":355,"line_end":355,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":182990,"byte_end":182993,"line_start":356,"line_end":356,"column_start":9,"column_end":12}},{"value":"/ Please see the module level documentation for more information on rotors!","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":183002,"byte_end":183079,"line_start":357,"line_end":357,"column_start":9,"column_end":86}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/rotor.rs","byte_start":183137,"byte_end":183147,"line_start":359,"line_end":359,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"transform","qualname":"::transform","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":2254},{"krate":0,"index":2264},{"krate":0,"index":2263},{"krate":0,"index":2261},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2266},{"krate":0,"index":2068},{"krate":0,"index":2081},{"krate":0,"index":2084},{"krate":0,"index":2087},{"krate":0,"index":2090},{"krate":0,"index":2093},{"krate":0,"index":2096},{"krate":0,"index":2268},{"krate":0,"index":2278},{"krate":0,"index":2277},{"krate":0,"index":2275},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2280},{"krate":0,"index":2099},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2118},{"krate":0,"index":2121},{"krate":0,"index":2124},{"krate":0,"index":2127},{"krate":0,"index":2282},{"krate":0,"index":2292},{"krate":0,"index":2291},{"krate":0,"index":2289},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2294},{"krate":0,"index":2130},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2149},{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2296},{"krate":0,"index":2306},{"krate":0,"index":2305},{"krate":0,"index":2303},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2308},{"krate":0,"index":2161},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2310},{"krate":0,"index":2320},{"krate":0,"index":2319},{"krate":0,"index":2317},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2322},{"krate":0,"index":2192},{"krate":0,"index":2205},{"krate":0,"index":2208},{"krate":0,"index":2211},{"krate":0,"index":2214},{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2324},{"krate":0,"index":2334},{"krate":0,"index":2333},{"krate":0,"index":2331},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2336},{"krate":0,"index":2223},{"krate":0,"index":2236},{"krate":0,"index":2239},{"krate":0,"index":2242},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2536},{"krate":0,"index":2547},{"krate":0,"index":2546},{"krate":0,"index":2544},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2549},{"krate":0,"index":2338},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359},{"krate":0,"index":2362},{"krate":0,"index":2365},{"krate":0,"index":2368},{"krate":0,"index":2551},{"krate":0,"index":2562},{"krate":0,"index":2561},{"krate":0,"index":2559},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2564},{"krate":0,"index":2371},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2392},{"krate":0,"index":2395},{"krate":0,"index":2398},{"krate":0,"index":2401},{"krate":0,"index":2566},{"krate":0,"index":2577},{"krate":0,"index":2576},{"krate":0,"index":2574},{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2579},{"krate":0,"index":2404},{"krate":0,"index":2419},{"krate":0,"index":2422},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2581},{"krate":0,"index":2592},{"krate":0,"index":2591},{"krate":0,"index":2589},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2594},{"krate":0,"index":2437},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2458},{"krate":0,"index":2461},{"krate":0,"index":2464},{"krate":0,"index":2467},{"krate":0,"index":2596},{"krate":0,"index":2607},{"krate":0,"index":2606},{"krate":0,"index":2604},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2609},{"krate":0,"index":2470},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2611},{"krate":0,"index":2622},{"krate":0,"index":2621},{"krate":0,"index":2619},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2624},{"krate":0,"index":2503},{"krate":0,"index":2518},{"krate":0,"index":2521},{"krate":0,"index":2524},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2533}],"decl_id":null,"docs":" Dedicated transformation types as the combination of primitives.","sig":null,"attributes":[{"value":"/ Dedicated transformation types as the combination of primitives.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":201974,"byte_end":202042,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202043,"byte_end":202046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Note that you may want to us these types over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202047,"byte_end":202122,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ homogeneous transformation matrix because they are faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202123,"byte_end":202204,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202205,"byte_end":202244,"line_start":5,"line_end":5,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2254},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208150,"byte_end":208159,"line_start":183,"line_end":183,"column_start":5,"column_end":14},"name":"Isometry2","qualname":"::transform::Isometry2","value":"Isometry2 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2255},{"krate":0,"index":2256}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202398,"byte_end":202449,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202458,"byte_end":202461,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202470,"byte_end":202540,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202549,"byte_end":202552,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202561,"byte_end":202624,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202633,"byte_end":202716,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202725,"byte_end":202764,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202822,"byte_end":202832,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2268},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208194,"byte_end":208205,"line_start":184,"line_end":184,"column_start":5,"column_end":16},"name":"Isometry2x4","qualname":"::transform::Isometry2x4","value":"Isometry2x4 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2269},{"krate":0,"index":2270}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202398,"byte_end":202449,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202458,"byte_end":202461,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202470,"byte_end":202540,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202549,"byte_end":202552,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202561,"byte_end":202624,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202633,"byte_end":202716,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202725,"byte_end":202764,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202822,"byte_end":202832,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2282},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208248,"byte_end":208259,"line_start":185,"line_end":185,"column_start":5,"column_end":16},"name":"Isometry2x8","qualname":"::transform::Isometry2x8","value":"Isometry2x8 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2283},{"krate":0,"index":2284}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202398,"byte_end":202449,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202458,"byte_end":202461,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202470,"byte_end":202540,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202549,"byte_end":202552,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202561,"byte_end":202624,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202633,"byte_end":202716,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202725,"byte_end":202764,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202822,"byte_end":202832,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2296},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208303,"byte_end":208312,"line_start":187,"line_end":187,"column_start":5,"column_end":14},"name":"Isometry3","qualname":"::transform::Isometry3","value":"Isometry3 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2297},{"krate":0,"index":2298}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202398,"byte_end":202449,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202458,"byte_end":202461,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202470,"byte_end":202540,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202549,"byte_end":202552,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202561,"byte_end":202624,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202633,"byte_end":202716,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202725,"byte_end":202764,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202822,"byte_end":202832,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2310},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208347,"byte_end":208358,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Isometry3x4","qualname":"::transform::Isometry3x4","value":"Isometry3x4 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2311},{"krate":0,"index":2312}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202398,"byte_end":202449,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202458,"byte_end":202461,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202470,"byte_end":202540,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202549,"byte_end":202552,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202561,"byte_end":202624,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202633,"byte_end":202716,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202725,"byte_end":202764,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202822,"byte_end":202832,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2324},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208401,"byte_end":208412,"line_start":189,"line_end":189,"column_start":5,"column_end":16},"name":"Isometry3x8","qualname":"::transform::Isometry3x8","value":"Isometry3x8 { translation, rotation }","parent":null,"children":[{"krate":0,"index":2325},{"krate":0,"index":2326}],"decl_id":null,"docs":" An Isometry, aka a \"rigid body transformation\".","sig":null,"attributes":[{"value":"/ An Isometry, aka a \"rigid body transformation\".","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202398,"byte_end":202449,"line_start":13,"line_end":13,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202458,"byte_end":202461,"line_start":14,"line_end":14,"column_start":9,"column_end":12}},{"value":"/ Defined as the combination of a rotation *and then* a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202470,"byte_end":202540,"line_start":15,"line_end":15,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202549,"byte_end":202552,"line_start":16,"line_end":16,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202561,"byte_end":202624,"line_start":17,"line_end":17,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202633,"byte_end":202716,"line_start":18,"line_end":18,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202725,"byte_end":202764,"line_start":19,"line_end":19,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":202822,"byte_end":202832,"line_start":21,"line_end":21,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2536},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":216132,"byte_end":216143,"line_start":405,"line_end":405,"column_start":5,"column_end":16},"name":"Similarity2","qualname":"::transform::Similarity2","value":"Similarity2 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2539}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208943,"byte_end":209012,"line_start":206,"line_end":206,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209021,"byte_end":209024,"line_start":207,"line_end":207,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209033,"byte_end":209115,"line_start":208,"line_end":208,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209124,"byte_end":209127,"line_start":209,"line_end":209,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209136,"byte_end":209199,"line_start":210,"line_end":210,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209208,"byte_end":209291,"line_start":211,"line_end":211,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209300,"byte_end":209339,"line_start":212,"line_end":212,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209397,"byte_end":209407,"line_start":214,"line_end":214,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2551},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":216178,"byte_end":216191,"line_start":406,"line_end":406,"column_start":5,"column_end":18},"name":"Similarity2x4","qualname":"::transform::Similarity2x4","value":"Similarity2x4 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2552},{"krate":0,"index":2553},{"krate":0,"index":2554}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208943,"byte_end":209012,"line_start":206,"line_end":206,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209021,"byte_end":209024,"line_start":207,"line_end":207,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209033,"byte_end":209115,"line_start":208,"line_end":208,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209124,"byte_end":209127,"line_start":209,"line_end":209,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209136,"byte_end":209199,"line_start":210,"line_end":210,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209208,"byte_end":209291,"line_start":211,"line_end":211,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209300,"byte_end":209339,"line_start":212,"line_end":212,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209397,"byte_end":209407,"line_start":214,"line_end":214,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2566},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":216234,"byte_end":216247,"line_start":407,"line_end":407,"column_start":5,"column_end":18},"name":"Similarity2x8","qualname":"::transform::Similarity2x8","value":"Similarity2x8 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208943,"byte_end":209012,"line_start":206,"line_end":206,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209021,"byte_end":209024,"line_start":207,"line_end":207,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209033,"byte_end":209115,"line_start":208,"line_end":208,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209124,"byte_end":209127,"line_start":209,"line_end":209,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209136,"byte_end":209199,"line_start":210,"line_end":210,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209208,"byte_end":209291,"line_start":211,"line_end":211,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209300,"byte_end":209339,"line_start":212,"line_end":212,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209397,"byte_end":209407,"line_start":214,"line_end":214,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2581},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":216291,"byte_end":216302,"line_start":409,"line_end":409,"column_start":5,"column_end":16},"name":"Similarity3","qualname":"::transform::Similarity3","value":"Similarity3 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2584}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208943,"byte_end":209012,"line_start":206,"line_end":206,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209021,"byte_end":209024,"line_start":207,"line_end":207,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209033,"byte_end":209115,"line_start":208,"line_end":208,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209124,"byte_end":209127,"line_start":209,"line_end":209,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209136,"byte_end":209199,"line_start":210,"line_end":210,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209208,"byte_end":209291,"line_start":211,"line_end":211,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209300,"byte_end":209339,"line_start":212,"line_end":212,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209397,"byte_end":209407,"line_start":214,"line_end":214,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2596},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":216337,"byte_end":216350,"line_start":410,"line_end":410,"column_start":5,"column_end":18},"name":"Similarity3x4","qualname":"::transform::Similarity3x4","value":"Similarity3x4 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208943,"byte_end":209012,"line_start":206,"line_end":206,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209021,"byte_end":209024,"line_start":207,"line_end":207,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209033,"byte_end":209115,"line_start":208,"line_end":208,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209124,"byte_end":209127,"line_start":209,"line_end":209,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209136,"byte_end":209199,"line_start":210,"line_end":210,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209208,"byte_end":209291,"line_start":211,"line_end":211,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209300,"byte_end":209339,"line_start":212,"line_end":212,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209397,"byte_end":209407,"line_start":214,"line_end":214,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2611},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":216393,"byte_end":216406,"line_start":411,"line_end":411,"column_start":5,"column_end":18},"name":"Similarity3x8","qualname":"::transform::Similarity3x8","value":"Similarity3x8 { translation, rotation, scale }","parent":null,"children":[{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614}],"decl_id":null,"docs":" A Similarity, i.e. an Isometry but with an added uniform scaling.","sig":null,"attributes":[{"value":"/ A Similarity, i.e. an Isometry but with an added uniform scaling.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":208943,"byte_end":209012,"line_start":206,"line_end":206,"column_start":9,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209021,"byte_end":209024,"line_start":207,"line_end":207,"column_start":9,"column_end":12}},{"value":"/ Defined as a uniform scaling followed by a rotation followed by a translation.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209033,"byte_end":209115,"line_start":208,"line_end":208,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209124,"byte_end":209127,"line_start":209,"line_end":209,"column_start":9,"column_end":12}},{"value":"/ You may want to us this type over the corresponding type of","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209136,"byte_end":209199,"line_start":210,"line_end":210,"column_start":9,"column_end":72}},{"value":"/ homogeneous transformation matrix because it will be faster in most operations,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209208,"byte_end":209291,"line_start":211,"line_end":211,"column_start":9,"column_end":92}},{"value":"/ especially composition and inverse.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209300,"byte_end":209339,"line_start":212,"line_end":212,"column_start":9,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/transform.rs","byte_start":209397,"byte_end":209407,"line_start":214,"line_end":214,"column_start":9,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/mod.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":169},{"krate":0,"index":199},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234}],"decl_id":null,"docs":" Vectors and points, i.e. directed line segments and locations.\n","sig":null,"attributes":[{"value":"/ Vectors and points, i.e. directed line segments and locations.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/mod.rs","byte_start":216831,"byte_end":216897,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2968},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":239292,"byte_end":239296,"line_start":730,"line_end":730,"column_start":6,"column_end":10},"name":"Vec2","qualname":"::vec::vec2::Vec2","value":"Vec2 { x, y }","parent":null,"children":[{"krate":0,"index":2969},{"krate":0,"index":2970}],"decl_id":null,"docs":" A set of two coordinates which may be interpreted as a vector or point in 2d space.","sig":null,"attributes":[{"value":"/ A set of two coordinates which may be interpreted as a vector or point in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217167,"byte_end":217254,"line_start":9,"line_end":9,"column_start":9,"column_end":96}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217263,"byte_end":217266,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217275,"byte_end":217367,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217376,"byte_end":217459,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217468,"byte_end":217506,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217573,"byte_end":217583,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2982},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":239339,"byte_end":239345,"line_start":731,"line_end":731,"column_start":6,"column_end":12},"name":"Vec2x4","qualname":"::vec::vec2::Vec2x4","value":"Vec2x4 { x, y }","parent":null,"children":[{"krate":0,"index":2983},{"krate":0,"index":2984}],"decl_id":null,"docs":" A set of two coordinates which may be interpreted as a vector or point in 2d space.","sig":null,"attributes":[{"value":"/ A set of two coordinates which may be interpreted as a vector or point in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217167,"byte_end":217254,"line_start":9,"line_end":9,"column_start":9,"column_end":96}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217263,"byte_end":217266,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217275,"byte_end":217367,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217376,"byte_end":217459,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217468,"byte_end":217506,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217573,"byte_end":217583,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":2996},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":239398,"byte_end":239404,"line_start":732,"line_end":732,"column_start":6,"column_end":12},"name":"Vec2x8","qualname":"::vec::vec2::Vec2x8","value":"Vec2x8 { x, y }","parent":null,"children":[{"krate":0,"index":2997},{"krate":0,"index":2998}],"decl_id":null,"docs":" A set of two coordinates which may be interpreted as a vector or point in 2d space.","sig":null,"attributes":[{"value":"/ A set of two coordinates which may be interpreted as a vector or point in 2d space.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217167,"byte_end":217254,"line_start":9,"line_end":9,"column_start":9,"column_end":96}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217263,"byte_end":217266,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217275,"byte_end":217367,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217376,"byte_end":217459,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217468,"byte_end":217506,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":217573,"byte_end":217583,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3395},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":266050,"byte_end":266054,"line_start":829,"line_end":829,"column_start":12,"column_end":16},"name":"Vec3","qualname":"::vec::vec3::Vec3","value":"Vec3 { x, y, z }","parent":null,"children":[{"krate":0,"index":3396},{"krate":0,"index":3397},{"krate":0,"index":3398}],"decl_id":null,"docs":" A set of three coordinates which may be interpreted as a point or vector in 3d space,\n or as a homogeneous 2d vector or point.","sig":null,"attributes":[{"value":"/ A set of three coordinates which may be interpreted as a point or vector in 3d space,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240229,"byte_end":240318,"line_start":8,"line_end":8,"column_start":11,"column_end":100}},{"value":"/ or as a homogeneous 2d vector or point.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240327,"byte_end":240370,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240379,"byte_end":240382,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240391,"byte_end":240483,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240492,"byte_end":240575,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240584,"byte_end":240622,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240689,"byte_end":240699,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3410},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":266099,"byte_end":266105,"line_start":830,"line_end":830,"column_start":14,"column_end":20},"name":"Vec3x4","qualname":"::vec::vec3::Vec3x4","value":"Vec3x4 { x, y, z }","parent":null,"children":[{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413}],"decl_id":null,"docs":" A set of three coordinates which may be interpreted as a point or vector in 3d space,\n or as a homogeneous 2d vector or point.","sig":null,"attributes":[{"value":"/ A set of three coordinates which may be interpreted as a point or vector in 3d space,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240229,"byte_end":240318,"line_start":8,"line_end":8,"column_start":11,"column_end":100}},{"value":"/ or as a homogeneous 2d vector or point.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240327,"byte_end":240370,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240379,"byte_end":240382,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240391,"byte_end":240483,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240492,"byte_end":240575,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240584,"byte_end":240622,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240689,"byte_end":240699,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3425},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":266158,"byte_end":266164,"line_start":831,"line_end":831,"column_start":14,"column_end":20},"name":"Vec3x8","qualname":"::vec::vec3::Vec3x8","value":"Vec3x8 { x, y, z }","parent":null,"children":[{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3428}],"decl_id":null,"docs":" A set of three coordinates which may be interpreted as a point or vector in 3d space,\n or as a homogeneous 2d vector or point.","sig":null,"attributes":[{"value":"/ A set of three coordinates which may be interpreted as a point or vector in 3d space,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240229,"byte_end":240318,"line_start":8,"line_end":8,"column_start":11,"column_end":100}},{"value":"/ or as a homogeneous 2d vector or point.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240327,"byte_end":240370,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240379,"byte_end":240382,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240391,"byte_end":240483,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240492,"byte_end":240575,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240584,"byte_end":240622,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":240689,"byte_end":240699,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3803},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":290285,"byte_end":290289,"line_start":755,"line_end":755,"column_start":5,"column_end":9},"name":"Vec4","qualname":"::vec::vec4::Vec4","value":"Vec4 { x, y, z, w }","parent":null,"children":[{"krate":0,"index":3804},{"krate":0,"index":3805},{"krate":0,"index":3806},{"krate":0,"index":3807}],"decl_id":null,"docs":" A set of four coordinates which may be interpreted as a point or vector in 4d space,\n or as a homogeneous 3d vector or point.","sig":null,"attributes":[{"value":"/ A set of four coordinates which may be interpreted as a point or vector in 4d space,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267004,"byte_end":267092,"line_start":8,"line_end":8,"column_start":11,"column_end":99}},{"value":"/ or as a homogeneous 3d vector or point.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267101,"byte_end":267144,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267153,"byte_end":267156,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267165,"byte_end":267257,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267266,"byte_end":267349,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267358,"byte_end":267396,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267463,"byte_end":267473,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3819},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":290314,"byte_end":290320,"line_start":756,"line_end":756,"column_start":5,"column_end":11},"name":"Vec4x4","qualname":"::vec::vec4::Vec4x4","value":"Vec4x4 { x, y, z, w }","parent":null,"children":[{"krate":0,"index":3820},{"krate":0,"index":3821},{"krate":0,"index":3822},{"krate":0,"index":3823}],"decl_id":null,"docs":" A set of four coordinates which may be interpreted as a point or vector in 4d space,\n or as a homogeneous 3d vector or point.","sig":null,"attributes":[{"value":"/ A set of four coordinates which may be interpreted as a point or vector in 4d space,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267004,"byte_end":267092,"line_start":8,"line_end":8,"column_start":11,"column_end":99}},{"value":"/ or as a homogeneous 3d vector or point.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267101,"byte_end":267144,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267153,"byte_end":267156,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267165,"byte_end":267257,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267266,"byte_end":267349,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267358,"byte_end":267396,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267463,"byte_end":267473,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":3835},"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":290351,"byte_end":290357,"line_start":757,"line_end":757,"column_start":5,"column_end":11},"name":"Vec4x8","qualname":"::vec::vec4::Vec4x8","value":"Vec4x8 { x, y, z, w }","parent":null,"children":[{"krate":0,"index":3836},{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3839}],"decl_id":null,"docs":" A set of four coordinates which may be interpreted as a point or vector in 4d space,\n or as a homogeneous 3d vector or point.","sig":null,"attributes":[{"value":"/ A set of four coordinates which may be interpreted as a point or vector in 4d space,","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267004,"byte_end":267092,"line_start":8,"line_end":8,"column_start":11,"column_end":99}},{"value":"/ or as a homogeneous 3d vector or point.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267101,"byte_end":267144,"line_start":9,"line_end":9,"column_start":9,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267153,"byte_end":267156,"line_start":10,"line_end":10,"column_start":9,"column_end":12}},{"value":"/ Generally this distinction between a point and vector is more of a pain than it is worth","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267165,"byte_end":267257,"line_start":11,"line_end":11,"column_start":9,"column_end":101}},{"value":"/ to distinguish on a type level, however when converting to and from homogeneous","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267266,"byte_end":267349,"line_start":12,"line_end":12,"column_start":9,"column_end":92}},{"value":"/ coordinates it is quite important.","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267358,"byte_end":267396,"line_start":13,"line_end":13,"column_start":9,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":267463,"byte_end":267473,"line_start":15,"line_end":15,"column_start":9,"column_end":19}}]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/util.rs","byte_start":8519,"byte_end":8525,"line_start":96,"line_end":96,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":236929,"byte_end":236935,"line_start":638,"line_end":638,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":237682,"byte_end":237688,"line_start":666,"line_end":666,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":263075,"byte_end":263081,"line_start":725,"line_end":725,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":264002,"byte_end":264008,"line_start":755,"line_end":755,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":286723,"byte_end":286729,"line_start":640,"line_end":640,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":287819,"byte_end":287825,"line_start":672,"line_end":672,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5545,"byte_end":5550,"line_start":88,"line_end":88,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":38}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5641,"byte_end":5647,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":44}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5657,"byte_end":5660,"line_start":94,"line_end":94,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5670,"byte_end":5680,"line_start":95,"line_end":95,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":64}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111928,"byte_end":111936,"line_start":9,"line_end":9,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111946,"byte_end":111952,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":81}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111962,"byte_end":111970,"line_start":11,"line_end":11,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":97}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/projection.rs","byte_start":111980,"byte_end":111986,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":113}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5690,"byte_end":5695,"line_start":96,"line_end":96,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":130}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5705,"byte_end":5714,"line_start":97,"line_end":97,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":136}},{"kind":"Mod","span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/lib.rs","byte_start":5724,"byte_end":5727,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":141}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/util.rs","byte_start":8186,"byte_end":8191,"line_start":83,"line_end":83,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":2827},"to":{"krate":0,"index":21}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/util.rs","byte_start":8519,"byte_end":8525,"line_start":96,"line_end":96,"column_start":48,"column_end":54},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":30},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":236929,"byte_end":236935,"line_start":638,"line_end":638,"column_start":26,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2982},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec2.rs","byte_start":237682,"byte_end":237688,"line_start":666,"line_end":666,"column_start":26,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2996},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":263075,"byte_end":263081,"line_start":725,"line_end":725,"column_start":26,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3410},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec3.rs","byte_start":264002,"byte_end":264008,"line_start":755,"line_end":755,"column_start":26,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3425},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":286723,"byte_end":286729,"line_start":640,"line_end":640,"column_start":26,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":3819},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/Users/raylee/.cargo/registry/src/github.com-1ecc6299db9ec823/ultraviolet-0.8.1/src/vec/vec4.rs","byte_start":287819,"byte_end":287825,"line_start":672,"line_end":672,"column_start":26,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":3835},"to":{"krate":2,"index":2728}}]}